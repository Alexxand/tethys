# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 128b, processorName = tethys-jackson)

# Run progress: 0.00% complete, ETA 01:46:40
# Fork: 1 of 4
# Warmup Iteration   1: 623555.257 ops/s
# Warmup Iteration   2: 662820.962 ops/s
# Warmup Iteration   3: 660968.214 ops/s
# Warmup Iteration   4: 662297.429 ops/s
Iteration   1: 662013.387 ops/s
Iteration   2: 657952.832 ops/s
Iteration   3: 658769.043 ops/s
Iteration   4: 658854.947 ops/s

# Run progress: 0.63% complete, ETA 01:47:06
# Fork: 2 of 4
# Warmup Iteration   1: 615650.721 ops/s
# Warmup Iteration   2: 654410.031 ops/s
# Warmup Iteration   3: 655531.687 ops/s
# Warmup Iteration   4: 653390.821 ops/s
Iteration   1: 656451.243 ops/s
Iteration   2: 655217.618 ops/s
Iteration   3: 641363.530 ops/s
Iteration   4: 644196.361 ops/s

# Run progress: 1.25% complete, ETA 01:46:20
# Fork: 3 of 4
# Warmup Iteration   1: 609853.330 ops/s
# Warmup Iteration   2: 653309.068 ops/s
# Warmup Iteration   3: 650597.880 ops/s
# Warmup Iteration   4: 652010.340 ops/s
Iteration   1: 653930.580 ops/s
Iteration   2: 651370.043 ops/s
Iteration   3: 654941.171 ops/s
Iteration   4: 653261.277 ops/s

# Run progress: 1.88% complete, ETA 01:45:39
# Fork: 4 of 4
# Warmup Iteration   1: 637930.733 ops/s
# Warmup Iteration   2: 674113.729 ops/s
# Warmup Iteration   3: 676282.848 ops/s
# Warmup Iteration   4: 673533.150 ops/s
Iteration   1: 671778.854 ops/s
Iteration   2: 673875.688 ops/s
Iteration   3: 675185.237 ops/s
Iteration   4: 674060.413 ops/s


Result "json.bench.JmhReaderBench.bench":
  658951.389 ±(99.9%) 10409.795 ops/s [Average]
  (min, avg, max) = (641363.530, 658951.389, 675185.237), stdev = 10223.810
  CI (99.9%): [648541.594, 669361.184] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 128b, processorName = pure-jackson)

# Run progress: 2.50% complete, ETA 01:44:57
# Fork: 1 of 4
# Warmup Iteration   1: 578896.432 ops/s
# Warmup Iteration   2: 604123.986 ops/s
# Warmup Iteration   3: 602037.173 ops/s
# Warmup Iteration   4: 603638.078 ops/s
Iteration   1: 603097.727 ops/s
Iteration   2: 603579.476 ops/s
Iteration   3: 604174.344 ops/s
Iteration   4: 603932.040 ops/s

# Run progress: 3.13% complete, ETA 01:44:17
# Fork: 2 of 4
# Warmup Iteration   1: 586606.966 ops/s
# Warmup Iteration   2: 610622.137 ops/s
# Warmup Iteration   3: 610203.452 ops/s
# Warmup Iteration   4: 608878.275 ops/s
Iteration   1: 610857.750 ops/s
Iteration   2: 611594.394 ops/s
Iteration   3: 609000.926 ops/s
Iteration   4: 598685.601 ops/s

# Run progress: 3.75% complete, ETA 01:43:36
# Fork: 3 of 4
# Warmup Iteration   1: 577019.929 ops/s
# Warmup Iteration   2: 598314.232 ops/s
# Warmup Iteration   3: 599813.434 ops/s
# Warmup Iteration   4: 599289.704 ops/s
Iteration   1: 600343.988 ops/s
Iteration   2: 599285.804 ops/s
Iteration   3: 600532.459 ops/s
Iteration   4: 600055.921 ops/s

# Run progress: 4.38% complete, ETA 01:42:56
# Fork: 4 of 4
# Warmup Iteration   1: 587209.221 ops/s
# Warmup Iteration   2: 607845.414 ops/s
# Warmup Iteration   3: 612332.830 ops/s
# Warmup Iteration   4: 610150.304 ops/s
Iteration   1: 612287.354 ops/s
Iteration   2: 613513.928 ops/s
Iteration   3: 611917.040 ops/s
Iteration   4: 612142.244 ops/s


Result "json.bench.JmhReaderBench.bench":
  605937.562 ±(99.9%) 5578.447 ops/s [Average]
  (min, avg, max) = (598685.601, 605937.562, 613513.928), stdev = 5478.781
  CI (99.9%): [600359.115, 611516.010] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 128b, processorName = circe-jawn)

# Run progress: 5.00% complete, ETA 01:42:15
# Fork: 1 of 4
# Warmup Iteration   1: 464041.319 ops/s
# Warmup Iteration   2: 500705.428 ops/s
# Warmup Iteration   3: 503612.615 ops/s
# Warmup Iteration   4: 501199.677 ops/s
Iteration   1: 502739.306 ops/s
Iteration   2: 504167.952 ops/s
Iteration   3: 501160.849 ops/s
Iteration   4: 502142.098 ops/s

# Run progress: 5.63% complete, ETA 01:41:35
# Fork: 2 of 4
# Warmup Iteration   1: 463047.699 ops/s
# Warmup Iteration   2: 502158.365 ops/s
# Warmup Iteration   3: 501863.879 ops/s
# Warmup Iteration   4: 501171.980 ops/s
Iteration   1: 501029.955 ops/s
Iteration   2: 497262.536 ops/s
Iteration   3: 493079.141 ops/s
Iteration   4: 502725.364 ops/s

# Run progress: 6.25% complete, ETA 01:40:54
# Fork: 3 of 4
# Warmup Iteration   1: 464179.766 ops/s
# Warmup Iteration   2: 498337.307 ops/s
# Warmup Iteration   3: 503142.896 ops/s
# Warmup Iteration   4: 501903.575 ops/s
Iteration   1: 501863.796 ops/s
Iteration   2: 500304.802 ops/s
Iteration   3: 501975.798 ops/s
Iteration   4: 501511.006 ops/s

# Run progress: 6.88% complete, ETA 01:40:14
# Fork: 4 of 4
# Warmup Iteration   1: 460128.729 ops/s
# Warmup Iteration   2: 502074.057 ops/s
# Warmup Iteration   3: 500131.203 ops/s
# Warmup Iteration   4: 501714.627 ops/s
Iteration   1: 499093.905 ops/s
Iteration   2: 500113.859 ops/s
Iteration   3: 500305.467 ops/s
Iteration   4: 500656.550 ops/s


Result "json.bench.JmhReaderBench.bench":
  500633.274 ±(99.9%) 2620.895 ops/s [Average]
  (min, avg, max) = (493079.141, 500633.274, 504167.952), stdev = 2574.070
  CI (99.9%): [498012.379, 503254.169] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 128b, processorName = circe-jackson)

# Run progress: 7.50% complete, ETA 01:39:33
# Fork: 1 of 4
# Warmup Iteration   1: 152639.467 ops/s
# Warmup Iteration   2: 173976.120 ops/s
# Warmup Iteration   3: 173597.968 ops/s
# Warmup Iteration   4: 173415.980 ops/s
Iteration   1: 173766.020 ops/s
Iteration   2: 173881.583 ops/s
Iteration   3: 174098.534 ops/s
Iteration   4: 173634.650 ops/s

# Run progress: 8.13% complete, ETA 01:38:53
# Fork: 2 of 4
# Warmup Iteration   1: 157190.315 ops/s
# Warmup Iteration   2: 177868.059 ops/s
# Warmup Iteration   3: 178428.720 ops/s
# Warmup Iteration   4: 177888.874 ops/s
Iteration   1: 177709.479 ops/s
Iteration   2: 178262.966 ops/s
Iteration   3: 178288.477 ops/s
Iteration   4: 178389.589 ops/s

# Run progress: 8.75% complete, ETA 01:38:12
# Fork: 3 of 4
# Warmup Iteration   1: 161896.238 ops/s
# Warmup Iteration   2: 180576.536 ops/s
# Warmup Iteration   3: 181068.984 ops/s
# Warmup Iteration   4: 180967.733 ops/s
Iteration   1: 181054.307 ops/s
Iteration   2: 181083.348 ops/s
Iteration   3: 180597.995 ops/s
Iteration   4: 181199.110 ops/s

# Run progress: 9.38% complete, ETA 01:37:32
# Fork: 4 of 4
# Warmup Iteration   1: 149835.489 ops/s
# Warmup Iteration   2: 171970.645 ops/s
# Warmup Iteration   3: 171795.720 ops/s
# Warmup Iteration   4: 172081.912 ops/s
Iteration   1: 171933.944 ops/s
Iteration   2: 172257.612 ops/s
Iteration   3: 171853.907 ops/s
Iteration   4: 172218.570 ops/s


Result "json.bench.JmhReaderBench.bench":
  176264.381 ±(99.9%) 3700.649 ops/s [Average]
  (min, avg, max) = (171853.907, 176264.381, 181199.110), stdev = 3634.533
  CI (99.9%): [172563.731, 179965.030] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 128b, processorName = json4s-jackson)

# Run progress: 10.00% complete, ETA 01:36:51
# Fork: 1 of 4
# Warmup Iteration   1: 65655.395 ops/s
# Warmup Iteration   2: 81379.205 ops/s
# Warmup Iteration   3: 81726.996 ops/s
# Warmup Iteration   4: 81256.473 ops/s
Iteration   1: 80998.536 ops/s
Iteration   2: 81459.018 ops/s
Iteration   3: 80965.939 ops/s
Iteration   4: 81339.754 ops/s

# Run progress: 10.63% complete, ETA 01:36:11
# Fork: 2 of 4
# Warmup Iteration   1: 65010.614 ops/s
# Warmup Iteration   2: 80266.891 ops/s
# Warmup Iteration   3: 80400.980 ops/s
# Warmup Iteration   4: 80539.550 ops/s
Iteration   1: 80440.217 ops/s
Iteration   2: 80648.564 ops/s
Iteration   3: 80227.773 ops/s
Iteration   4: 80475.482 ops/s

# Run progress: 11.25% complete, ETA 01:35:30
# Fork: 3 of 4
# Warmup Iteration   1: 66390.656 ops/s
# Warmup Iteration   2: 81977.595 ops/s
# Warmup Iteration   3: 82431.009 ops/s
# Warmup Iteration   4: 82153.703 ops/s
Iteration   1: 82359.757 ops/s
Iteration   2: 82292.675 ops/s
Iteration   3: 82582.346 ops/s
Iteration   4: 82154.188 ops/s

# Run progress: 11.88% complete, ETA 01:34:50
# Fork: 4 of 4
# Warmup Iteration   1: 66926.110 ops/s
# Warmup Iteration   2: 83341.367 ops/s
# Warmup Iteration   3: 83440.960 ops/s
# Warmup Iteration   4: 83668.621 ops/s
Iteration   1: 83432.305 ops/s
Iteration   2: 83162.711 ops/s
Iteration   3: 83423.732 ops/s
Iteration   4: 83863.786 ops/s


Result "json.bench.JmhReaderBench.bench":
  81864.174 ±(99.9%) 1224.992 ops/s [Average]
  (min, avg, max) = (80227.773, 81864.174, 83863.786), stdev = 1203.106
  CI (99.9%): [80639.182, 83089.166] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 128b, processorName = json4s-native)

# Run progress: 12.50% complete, ETA 01:34:09
# Fork: 1 of 4
# Warmup Iteration   1: 61036.109 ops/s
# Warmup Iteration   2: 75039.785 ops/s
# Warmup Iteration   3: 75007.256 ops/s
# Warmup Iteration   4: 75033.243 ops/s
Iteration   1: 75040.141 ops/s
Iteration   2: 75081.307 ops/s
Iteration   3: 75441.174 ops/s
Iteration   4: 75153.168 ops/s

# Run progress: 13.13% complete, ETA 01:33:29
# Fork: 2 of 4
# Warmup Iteration   1: 62768.961 ops/s
# Warmup Iteration   2: 76357.030 ops/s
# Warmup Iteration   3: 76401.958 ops/s
# Warmup Iteration   4: 76114.769 ops/s
Iteration   1: 76414.228 ops/s
Iteration   2: 76468.712 ops/s
Iteration   3: 76568.705 ops/s
Iteration   4: 76267.157 ops/s

# Run progress: 13.75% complete, ETA 01:32:49
# Fork: 3 of 4
# Warmup Iteration   1: 62664.146 ops/s
# Warmup Iteration   2: 76147.131 ops/s
# Warmup Iteration   3: 75658.065 ops/s
# Warmup Iteration   4: 75392.085 ops/s
Iteration   1: 75552.905 ops/s
Iteration   2: 75748.593 ops/s
Iteration   3: 75979.950 ops/s
Iteration   4: 75945.567 ops/s

# Run progress: 14.37% complete, ETA 01:32:08
# Fork: 4 of 4
# Warmup Iteration   1: 63912.851 ops/s
# Warmup Iteration   2: 80877.072 ops/s
# Warmup Iteration   3: 81387.475 ops/s
# Warmup Iteration   4: 81528.964 ops/s
Iteration   1: 81188.570 ops/s
Iteration   2: 81266.183 ops/s
Iteration   3: 81478.113 ops/s
Iteration   4: 80845.606 ops/s


Result "json.bench.JmhReaderBench.bench":
  77152.505 ±(99.9%) 2504.261 ops/s [Average]
  (min, avg, max) = (75040.141, 77152.505, 81478.113), stdev = 2459.520
  CI (99.9%): [74648.244, 79656.766] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 128b, processorName = play-json)

# Run progress: 15.00% complete, ETA 01:31:28
# Fork: 1 of 4
# Warmup Iteration   1: 188553.008 ops/s
# Warmup Iteration   2: 211310.378 ops/s
# Warmup Iteration   3: 211949.687 ops/s
# Warmup Iteration   4: 212258.532 ops/s
Iteration   1: 210683.085 ops/s
Iteration   2: 211584.790 ops/s
Iteration   3: 211850.205 ops/s
Iteration   4: 212801.954 ops/s

# Run progress: 15.63% complete, ETA 01:30:47
# Fork: 2 of 4
# Warmup Iteration   1: 192182.401 ops/s
# Warmup Iteration   2: 214953.430 ops/s
# Warmup Iteration   3: 214007.537 ops/s
# Warmup Iteration   4: 213662.701 ops/s
Iteration   1: 213958.256 ops/s
Iteration   2: 214492.977 ops/s
Iteration   3: 213353.778 ops/s
Iteration   4: 213843.832 ops/s

# Run progress: 16.25% complete, ETA 01:30:07
# Fork: 3 of 4
# Warmup Iteration   1: 193876.321 ops/s
# Warmup Iteration   2: 217074.337 ops/s
# Warmup Iteration   3: 217083.825 ops/s
# Warmup Iteration   4: 216953.402 ops/s
Iteration   1: 216482.762 ops/s
Iteration   2: 216235.150 ops/s
Iteration   3: 216765.520 ops/s
Iteration   4: 216551.480 ops/s

# Run progress: 16.88% complete, ETA 01:29:27
# Fork: 4 of 4
# Warmup Iteration   1: 191744.405 ops/s
# Warmup Iteration   2: 214243.222 ops/s
# Warmup Iteration   3: 214878.493 ops/s
# Warmup Iteration   4: 214125.812 ops/s
Iteration   1: 213984.785 ops/s
Iteration   2: 214404.042 ops/s
Iteration   3: 214515.871 ops/s
Iteration   4: 214865.358 ops/s


Result "json.bench.JmhReaderBench.bench":
  214148.365 ±(99.9%) 1853.803 ops/s [Average]
  (min, avg, max) = (210683.085, 214148.365, 216765.520), stdev = 1820.682
  CI (99.9%): [212294.562, 216002.168] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 128b, processorName = spray-json)

# Run progress: 17.50% complete, ETA 01:28:46
# Fork: 1 of 4
# Warmup Iteration   1: 334574.333 ops/s
# Warmup Iteration   2: 350537.530 ops/s
# Warmup Iteration   3: 353394.196 ops/s
# Warmup Iteration   4: 352959.422 ops/s
Iteration   1: 352891.624 ops/s
Iteration   2: 351213.147 ops/s
Iteration   3: 352440.934 ops/s
Iteration   4: 350997.797 ops/s

# Run progress: 18.13% complete, ETA 01:28:06
# Fork: 2 of 4
# Warmup Iteration   1: 332892.684 ops/s
# Warmup Iteration   2: 351881.337 ops/s
# Warmup Iteration   3: 353100.998 ops/s
# Warmup Iteration   4: 351659.433 ops/s
Iteration   1: 350945.026 ops/s
Iteration   2: 352547.033 ops/s
Iteration   3: 352500.891 ops/s
Iteration   4: 352746.711 ops/s

# Run progress: 18.75% complete, ETA 01:27:25
# Fork: 3 of 4
# Warmup Iteration   1: 330384.888 ops/s
# Warmup Iteration   2: 351226.247 ops/s
# Warmup Iteration   3: 350270.934 ops/s
# Warmup Iteration   4: 351564.664 ops/s
Iteration   1: 349953.736 ops/s
Iteration   2: 351814.698 ops/s
Iteration   3: 351074.194 ops/s
Iteration   4: 349833.068 ops/s

# Run progress: 19.38% complete, ETA 01:26:45
# Fork: 4 of 4
# Warmup Iteration   1: 330606.963 ops/s
# Warmup Iteration   2: 351854.752 ops/s
# Warmup Iteration   3: 352016.965 ops/s
# Warmup Iteration   4: 352662.406 ops/s
Iteration   1: 352604.027 ops/s
Iteration   2: 351076.932 ops/s
Iteration   3: 353843.381 ops/s
Iteration   4: 351029.653 ops/s


Result "json.bench.JmhReaderBench.bench":
  351719.553 ±(99.9%) 1143.099 ops/s [Average]
  (min, avg, max) = (349833.068, 351719.553, 353843.381), stdev = 1122.676
  CI (99.9%): [350576.454, 352862.652] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 1kb, processorName = tethys-jackson)

# Run progress: 20.00% complete, ETA 01:26:05
# Fork: 1 of 4
# Warmup Iteration   1: 91374.670 ops/s
# Warmup Iteration   2: 95800.441 ops/s
# Warmup Iteration   3: 96628.707 ops/s
# Warmup Iteration   4: 96846.278 ops/s
Iteration   1: 97046.571 ops/s
Iteration   2: 96245.353 ops/s
Iteration   3: 97006.989 ops/s
Iteration   4: 96494.010 ops/s

# Run progress: 20.63% complete, ETA 01:25:24
# Fork: 2 of 4
# Warmup Iteration   1: 86871.276 ops/s
# Warmup Iteration   2: 91914.557 ops/s
# Warmup Iteration   3: 92073.455 ops/s
# Warmup Iteration   4: 91787.791 ops/s
Iteration   1: 91609.844 ops/s
Iteration   2: 91919.895 ops/s
Iteration   3: 91757.642 ops/s
Iteration   4: 92501.044 ops/s

# Run progress: 21.25% complete, ETA 01:24:44
# Fork: 3 of 4
# Warmup Iteration   1: 89807.439 ops/s
# Warmup Iteration   2: 94967.695 ops/s
# Warmup Iteration   3: 95388.674 ops/s
# Warmup Iteration   4: 95252.363 ops/s
Iteration   1: 94849.038 ops/s
Iteration   2: 94487.001 ops/s
Iteration   3: 95076.500 ops/s
Iteration   4: 95136.713 ops/s

# Run progress: 21.88% complete, ETA 01:24:04
# Fork: 4 of 4
# Warmup Iteration   1: 90514.338 ops/s
# Warmup Iteration   2: 95579.860 ops/s
# Warmup Iteration   3: 95341.234 ops/s
# Warmup Iteration   4: 95601.744 ops/s
Iteration   1: 95170.382 ops/s
Iteration   2: 95636.280 ops/s
Iteration   3: 95493.206 ops/s
Iteration   4: 95357.141 ops/s


Result "json.bench.JmhReaderBench.bench":
  94736.726 ±(99.9%) 1854.179 ops/s [Average]
  (min, avg, max) = (91609.844, 94736.726, 97046.571), stdev = 1821.052
  CI (99.9%): [92882.546, 96590.905] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 1kb, processorName = pure-jackson)

# Run progress: 22.50% complete, ETA 01:23:23
# Fork: 1 of 4
# Warmup Iteration   1: 101565.807 ops/s
# Warmup Iteration   2: 106302.295 ops/s
# Warmup Iteration   3: 105814.796 ops/s
# Warmup Iteration   4: 106153.583 ops/s
Iteration   1: 106357.590 ops/s
Iteration   2: 105973.621 ops/s
Iteration   3: 105947.941 ops/s
Iteration   4: 106119.284 ops/s

# Run progress: 23.13% complete, ETA 01:22:43
# Fork: 2 of 4
# Warmup Iteration   1: 101183.132 ops/s
# Warmup Iteration   2: 105841.017 ops/s
# Warmup Iteration   3: 106044.490 ops/s
# Warmup Iteration   4: 106053.400 ops/s
Iteration   1: 105784.524 ops/s
Iteration   2: 106424.851 ops/s
Iteration   3: 106226.468 ops/s
Iteration   4: 106705.636 ops/s

# Run progress: 23.75% complete, ETA 01:22:03
# Fork: 3 of 4
# Warmup Iteration   1: 101204.966 ops/s
# Warmup Iteration   2: 105731.172 ops/s
# Warmup Iteration   3: 105591.693 ops/s
# Warmup Iteration   4: 106458.956 ops/s
Iteration   1: 106136.930 ops/s
Iteration   2: 106017.941 ops/s
Iteration   3: 102326.621 ops/s
Iteration   4: 102814.432 ops/s

# Run progress: 24.38% complete, ETA 01:21:22
# Fork: 4 of 4
# Warmup Iteration   1: 101960.655 ops/s
# Warmup Iteration   2: 107032.341 ops/s
# Warmup Iteration   3: 106879.252 ops/s
# Warmup Iteration   4: 106790.713 ops/s
Iteration   1: 106820.630 ops/s
Iteration   2: 106799.576 ops/s
Iteration   3: 106967.501 ops/s
Iteration   4: 107293.834 ops/s


Result "json.bench.JmhReaderBench.bench":
  105919.836 ±(99.9%) 1401.072 ops/s [Average]
  (min, avg, max) = (102326.621, 105919.836, 107293.834), stdev = 1376.040
  CI (99.9%): [104518.765, 107320.908] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 1kb, processorName = circe-jawn)

# Run progress: 25.00% complete, ETA 01:20:42
# Fork: 1 of 4
# Warmup Iteration   1: 61799.739 ops/s
# Warmup Iteration   2: 66952.571 ops/s
# Warmup Iteration   3: 66792.687 ops/s
# Warmup Iteration   4: 66738.303 ops/s
Iteration   1: 66735.475 ops/s
Iteration   2: 66846.484 ops/s
Iteration   3: 66875.731 ops/s
Iteration   4: 67041.331 ops/s

# Run progress: 25.62% complete, ETA 01:20:02
# Fork: 2 of 4
# Warmup Iteration   1: 61932.227 ops/s
# Warmup Iteration   2: 67011.712 ops/s
# Warmup Iteration   3: 67117.923 ops/s
# Warmup Iteration   4: 66876.782 ops/s
Iteration   1: 67051.668 ops/s
Iteration   2: 66802.380 ops/s
Iteration   3: 66880.470 ops/s
Iteration   4: 67030.413 ops/s

# Run progress: 26.25% complete, ETA 01:19:21
# Fork: 3 of 4
# Warmup Iteration   1: 62026.871 ops/s
# Warmup Iteration   2: 67465.426 ops/s
# Warmup Iteration   3: 67335.787 ops/s
# Warmup Iteration   4: 67423.889 ops/s
Iteration   1: 67442.467 ops/s
Iteration   2: 67116.281 ops/s
Iteration   3: 67358.272 ops/s
Iteration   4: 67537.178 ops/s

# Run progress: 26.88% complete, ETA 01:18:41
# Fork: 4 of 4
# Warmup Iteration   1: 61624.086 ops/s
# Warmup Iteration   2: 66618.690 ops/s
# Warmup Iteration   3: 66517.205 ops/s
# Warmup Iteration   4: 66676.704 ops/s
Iteration   1: 66640.891 ops/s
Iteration   2: 66801.984 ops/s
Iteration   3: 66643.546 ops/s
Iteration   4: 66591.824 ops/s


Result "json.bench.JmhReaderBench.bench":
  66962.275 ±(99.9%) 291.910 ops/s [Average]
  (min, avg, max) = (66591.824, 66962.275, 67537.178), stdev = 286.695
  CI (99.9%): [66670.364, 67254.185] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 1kb, processorName = circe-jackson)

# Run progress: 27.50% complete, ETA 01:18:01
# Fork: 1 of 4
# Warmup Iteration   1: 22764.356 ops/s
# Warmup Iteration   2: 25979.676 ops/s
# Warmup Iteration   3: 25971.569 ops/s
# Warmup Iteration   4: 25888.470 ops/s
Iteration   1: 25908.897 ops/s
Iteration   2: 25952.818 ops/s
Iteration   3: 25979.198 ops/s
Iteration   4: 25925.648 ops/s

# Run progress: 28.13% complete, ETA 01:17:20
# Fork: 2 of 4
# Warmup Iteration   1: 22578.722 ops/s
# Warmup Iteration   2: 25892.228 ops/s
# Warmup Iteration   3: 25930.211 ops/s
# Warmup Iteration   4: 26031.586 ops/s
Iteration   1: 25993.793 ops/s
Iteration   2: 25969.905 ops/s
Iteration   3: 25937.984 ops/s
Iteration   4: 25882.373 ops/s

# Run progress: 28.75% complete, ETA 01:16:40
# Fork: 3 of 4
# Warmup Iteration   1: 22436.635 ops/s
# Warmup Iteration   2: 25698.406 ops/s
# Warmup Iteration   3: 25681.441 ops/s
# Warmup Iteration   4: 25675.209 ops/s
Iteration   1: 25718.423 ops/s
Iteration   2: 25643.080 ops/s
Iteration   3: 25493.310 ops/s
Iteration   4: 25643.374 ops/s

# Run progress: 29.38% complete, ETA 01:15:59
# Fork: 4 of 4
# Warmup Iteration   1: 22490.669 ops/s
# Warmup Iteration   2: 25636.482 ops/s
# Warmup Iteration   3: 25770.211 ops/s
# Warmup Iteration   4: 25721.530 ops/s
Iteration   1: 25654.227 ops/s
Iteration   2: 25670.647 ops/s
Iteration   3: 25684.400 ops/s
Iteration   4: 25730.998 ops/s


Result "json.bench.JmhReaderBench.bench":
  25799.317 ±(99.9%) 162.343 ops/s [Average]
  (min, avg, max) = (25493.310, 25799.317, 25993.793), stdev = 159.442
  CI (99.9%): [25636.974, 25961.660] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 1kb, processorName = json4s-jackson)

# Run progress: 30.00% complete, ETA 01:15:19
# Fork: 1 of 4
# Warmup Iteration   1: 10610.544 ops/s
# Warmup Iteration   2: 12923.655 ops/s
# Warmup Iteration   3: 12851.238 ops/s
# Warmup Iteration   4: 12903.410 ops/s
Iteration   1: 12929.486 ops/s
Iteration   2: 12939.613 ops/s
Iteration   3: 12867.942 ops/s
Iteration   4: 12903.858 ops/s

# Run progress: 30.63% complete, ETA 01:14:39
# Fork: 2 of 4
# Warmup Iteration   1: 10332.010 ops/s
# Warmup Iteration   2: 12791.573 ops/s
# Warmup Iteration   3: 12785.727 ops/s
# Warmup Iteration   4: 12762.711 ops/s
Iteration   1: 12805.276 ops/s
Iteration   2: 12813.972 ops/s
Iteration   3: 12801.320 ops/s
Iteration   4: 12774.885 ops/s

# Run progress: 31.25% complete, ETA 01:13:58
# Fork: 3 of 4
# Warmup Iteration   1: 9903.821 ops/s
# Warmup Iteration   2: 12103.352 ops/s
# Warmup Iteration   3: 12135.491 ops/s
# Warmup Iteration   4: 12172.210 ops/s
Iteration   1: 12180.850 ops/s
Iteration   2: 12082.978 ops/s
Iteration   3: 12102.520 ops/s
Iteration   4: 12139.841 ops/s

# Run progress: 31.87% complete, ETA 01:13:18
# Fork: 4 of 4
# Warmup Iteration   1: 10362.900 ops/s
# Warmup Iteration   2: 12634.618 ops/s
# Warmup Iteration   3: 12691.326 ops/s
# Warmup Iteration   4: 12795.737 ops/s
Iteration   1: 12761.177 ops/s
Iteration   2: 12791.308 ops/s
Iteration   3: 12723.150 ops/s
Iteration   4: 12766.428 ops/s


Result "json.bench.JmhReaderBench.bench":
  12649.038 ±(99.9%) 323.720 ops/s [Average]
  (min, avg, max) = (12082.978, 12649.038, 12939.613), stdev = 317.937
  CI (99.9%): [12325.317, 12972.758] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 1kb, processorName = json4s-native)

# Run progress: 32.50% complete, ETA 01:12:38
# Fork: 1 of 4
# Warmup Iteration   1: 9752.118 ops/s
# Warmup Iteration   2: 11834.668 ops/s
# Warmup Iteration   3: 11865.839 ops/s
# Warmup Iteration   4: 11825.030 ops/s
Iteration   1: 11840.545 ops/s
Iteration   2: 11791.154 ops/s
Iteration   3: 11844.868 ops/s
Iteration   4: 11805.609 ops/s

# Run progress: 33.13% complete, ETA 01:11:57
# Fork: 2 of 4
# Warmup Iteration   1: 9482.746 ops/s
# Warmup Iteration   2: 11542.440 ops/s
# Warmup Iteration   3: 11573.361 ops/s
# Warmup Iteration   4: 11564.612 ops/s
Iteration   1: 11597.685 ops/s
Iteration   2: 11621.286 ops/s
Iteration   3: 11575.289 ops/s
Iteration   4: 11587.877 ops/s

# Run progress: 33.75% complete, ETA 01:11:17
# Fork: 3 of 4
# Warmup Iteration   1: 9576.658 ops/s
# Warmup Iteration   2: 11580.377 ops/s
# Warmup Iteration   3: 11448.735 ops/s
# Warmup Iteration   4: 11593.787 ops/s
Iteration   1: 11581.705 ops/s
Iteration   2: 11604.349 ops/s
Iteration   3: 11612.145 ops/s
Iteration   4: 11619.381 ops/s

# Run progress: 34.38% complete, ETA 01:10:37
# Fork: 4 of 4
# Warmup Iteration   1: 9647.462 ops/s
# Warmup Iteration   2: 11893.441 ops/s
# Warmup Iteration   3: 11896.009 ops/s
# Warmup Iteration   4: 11878.234 ops/s
Iteration   1: 11884.982 ops/s
Iteration   2: 11906.766 ops/s
Iteration   3: 11886.069 ops/s
Iteration   4: 11862.645 ops/s


Result "json.bench.JmhReaderBench.bench":
  11726.397 ±(99.9%) 136.414 ops/s [Average]
  (min, avg, max) = (11575.289, 11726.397, 11906.766), stdev = 133.977
  CI (99.9%): [11589.983, 11862.812] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 1kb, processorName = play-json)

# Run progress: 35.00% complete, ETA 01:09:56
# Fork: 1 of 4
# Warmup Iteration   1: 25279.386 ops/s
# Warmup Iteration   2: 28247.691 ops/s
# Warmup Iteration   3: 28356.378 ops/s
# Warmup Iteration   4: 28365.947 ops/s
Iteration   1: 28367.305 ops/s
Iteration   2: 28397.716 ops/s
Iteration   3: 28368.174 ops/s
Iteration   4: 28455.107 ops/s

# Run progress: 35.63% complete, ETA 01:09:16
# Fork: 2 of 4
# Warmup Iteration   1: 26925.226 ops/s
# Warmup Iteration   2: 29974.480 ops/s
# Warmup Iteration   3: 30023.497 ops/s
# Warmup Iteration   4: 29911.579 ops/s
Iteration   1: 29962.378 ops/s
Iteration   2: 29994.102 ops/s
Iteration   3: 29965.225 ops/s
Iteration   4: 29981.348 ops/s

# Run progress: 36.25% complete, ETA 01:08:36
# Fork: 3 of 4
# Warmup Iteration   1: 25442.916 ops/s
# Warmup Iteration   2: 28489.483 ops/s
# Warmup Iteration   3: 28496.611 ops/s
# Warmup Iteration   4: 28529.774 ops/s
Iteration   1: 28462.817 ops/s
Iteration   2: 28476.606 ops/s
Iteration   3: 28569.271 ops/s
Iteration   4: 28468.965 ops/s

# Run progress: 36.88% complete, ETA 01:07:55
# Fork: 4 of 4
# Warmup Iteration   1: 25432.161 ops/s
# Warmup Iteration   2: 28473.076 ops/s
# Warmup Iteration   3: 28536.261 ops/s
# Warmup Iteration   4: 28445.252 ops/s
Iteration   1: 28522.817 ops/s
Iteration   2: 28530.747 ops/s
Iteration   3: 28549.231 ops/s
Iteration   4: 28552.535 ops/s


Result "json.bench.JmhReaderBench.bench":
  28851.521 ±(99.9%) 685.392 ops/s [Average]
  (min, avg, max) = (28367.305, 28851.521, 29994.102), stdev = 673.146
  CI (99.9%): [28166.130, 29536.913] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 1kb, processorName = spray-json)

# Run progress: 37.50% complete, ETA 01:07:15
# Fork: 1 of 4
# Warmup Iteration   1: 45410.799 ops/s
# Warmup Iteration   2: 48056.056 ops/s
# Warmup Iteration   3: 48071.858 ops/s
# Warmup Iteration   4: 47992.293 ops/s
Iteration   1: 48303.335 ops/s
Iteration   2: 48005.085 ops/s
Iteration   3: 48149.540 ops/s
Iteration   4: 47900.417 ops/s

# Run progress: 38.13% complete, ETA 01:06:34
# Fork: 2 of 4
# Warmup Iteration   1: 44524.605 ops/s
# Warmup Iteration   2: 46972.987 ops/s
# Warmup Iteration   3: 46993.913 ops/s
# Warmup Iteration   4: 47307.741 ops/s
Iteration   1: 47239.370 ops/s
Iteration   2: 47199.571 ops/s
Iteration   3: 47132.022 ops/s
Iteration   4: 47193.057 ops/s

# Run progress: 38.75% complete, ETA 01:05:54
# Fork: 3 of 4
# Warmup Iteration   1: 44426.477 ops/s
# Warmup Iteration   2: 46994.488 ops/s
# Warmup Iteration   3: 47059.654 ops/s
# Warmup Iteration   4: 47003.155 ops/s
Iteration   1: 47072.702 ops/s
Iteration   2: 47024.195 ops/s
Iteration   3: 46940.226 ops/s
Iteration   4: 46863.133 ops/s

# Run progress: 39.38% complete, ETA 01:05:14
# Fork: 4 of 4
# Warmup Iteration   1: 43932.199 ops/s
# Warmup Iteration   2: 46756.812 ops/s
# Warmup Iteration   3: 46319.211 ops/s
# Warmup Iteration   4: 46417.026 ops/s
Iteration   1: 46425.485 ops/s
Iteration   2: 46219.102 ops/s
Iteration   3: 46407.773 ops/s
Iteration   4: 46311.851 ops/s


Result "json.bench.JmhReaderBench.bench":
  47149.179 ±(99.9%) 666.593 ops/s [Average]
  (min, avg, max) = (46219.102, 47149.179, 48303.335), stdev = 654.683
  CI (99.9%): [46482.586, 47815.772] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 128kb, processorName = tethys-jackson)

# Run progress: 40.00% complete, ETA 01:04:33
# Fork: 1 of 4
# Warmup Iteration   1: 694.795 ops/s
# Warmup Iteration   2: 741.014 ops/s
# Warmup Iteration   3: 737.547 ops/s
# Warmup Iteration   4: 740.841 ops/s
Iteration   1: 739.904 ops/s
Iteration   2: 736.428 ops/s
Iteration   3: 741.777 ops/s
Iteration   4: 740.576 ops/s

# Run progress: 40.63% complete, ETA 01:03:53
# Fork: 2 of 4
# Warmup Iteration   1: 690.186 ops/s
# Warmup Iteration   2: 731.527 ops/s
# Warmup Iteration   3: 731.526 ops/s
# Warmup Iteration   4: 730.125 ops/s
Iteration   1: 732.757 ops/s
Iteration   2: 731.431 ops/s
Iteration   3: 730.010 ops/s
Iteration   4: 732.117 ops/s

# Run progress: 41.25% complete, ETA 01:03:13
# Fork: 3 of 4
# Warmup Iteration   1: 687.219 ops/s
# Warmup Iteration   2: 732.108 ops/s
# Warmup Iteration   3: 733.734 ops/s
# Warmup Iteration   4: 737.399 ops/s
Iteration   1: 731.999 ops/s
Iteration   2: 735.066 ops/s
Iteration   3: 736.985 ops/s
Iteration   4: 731.739 ops/s

# Run progress: 41.88% complete, ETA 01:02:33
# Fork: 4 of 4
# Warmup Iteration   1: 683.145 ops/s
# Warmup Iteration   2: 725.867 ops/s
# Warmup Iteration   3: 722.766 ops/s
# Warmup Iteration   4: 727.379 ops/s
Iteration   1: 725.488 ops/s
Iteration   2: 727.211 ops/s
Iteration   3: 727.388 ops/s
Iteration   4: 727.314 ops/s


Result "json.bench.JmhReaderBench.bench":
  733.012 ±(99.9%) 5.142 ops/s [Average]
  (min, avg, max) = (725.488, 733.012, 741.777), stdev = 5.050
  CI (99.9%): [727.870, 738.154] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 128kb, processorName = pure-jackson)

# Run progress: 42.50% complete, ETA 01:01:52
# Fork: 1 of 4
# Warmup Iteration   1: 811.901 ops/s
# Warmup Iteration   2: 857.079 ops/s
# Warmup Iteration   3: 853.427 ops/s
# Warmup Iteration   4: 858.299 ops/s
Iteration   1: 856.894 ops/s
Iteration   2: 854.901 ops/s
Iteration   3: 850.701 ops/s
Iteration   4: 859.161 ops/s

# Run progress: 43.13% complete, ETA 01:01:12
# Fork: 2 of 4
# Warmup Iteration   1: 818.322 ops/s
# Warmup Iteration   2: 853.724 ops/s
# Warmup Iteration   3: 858.640 ops/s
# Warmup Iteration   4: 862.526 ops/s
Iteration   1: 857.240 ops/s
Iteration   2: 860.799 ops/s
Iteration   3: 862.357 ops/s
Iteration   4: 856.594 ops/s

# Run progress: 43.75% complete, ETA 01:00:32
# Fork: 3 of 4
# Warmup Iteration   1: 832.878 ops/s
# Warmup Iteration   2: 872.702 ops/s
# Warmup Iteration   3: 877.243 ops/s
# Warmup Iteration   4: 871.874 ops/s
Iteration   1: 878.849 ops/s
Iteration   2: 879.022 ops/s
Iteration   3: 875.354 ops/s
Iteration   4: 877.936 ops/s

# Run progress: 44.38% complete, ETA 00:59:51
# Fork: 4 of 4
# Warmup Iteration   1: 833.925 ops/s
# Warmup Iteration   2: 882.385 ops/s
# Warmup Iteration   3: 881.422 ops/s
# Warmup Iteration   4: 880.916 ops/s
Iteration   1: 883.423 ops/s
Iteration   2: 881.130 ops/s
Iteration   3: 881.808 ops/s
Iteration   4: 880.001 ops/s


Result "json.bench.JmhReaderBench.bench":
  868.511 ±(99.9%) 12.146 ops/s [Average]
  (min, avg, max) = (850.701, 868.511, 883.423), stdev = 11.929
  CI (99.9%): [856.364, 880.657] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 128kb, processorName = circe-jawn)

# Run progress: 45.00% complete, ETA 00:59:11
# Fork: 1 of 4
# Warmup Iteration   1: 468.476 ops/s
# Warmup Iteration   2: 502.869 ops/s
# Warmup Iteration   3: 502.119 ops/s
# Warmup Iteration   4: 504.637 ops/s
Iteration   1: 502.996 ops/s
Iteration   2: 503.091 ops/s
Iteration   3: 503.800 ops/s
Iteration   4: 503.064 ops/s

# Run progress: 45.63% complete, ETA 00:58:31
# Fork: 2 of 4
# Warmup Iteration   1: 462.201 ops/s
# Warmup Iteration   2: 495.742 ops/s
# Warmup Iteration   3: 494.394 ops/s
# Warmup Iteration   4: 495.801 ops/s
Iteration   1: 493.540 ops/s
Iteration   2: 492.757 ops/s
Iteration   3: 494.286 ops/s
Iteration   4: 492.572 ops/s

# Run progress: 46.25% complete, ETA 00:57:50
# Fork: 3 of 4
# Warmup Iteration   1: 465.298 ops/s
# Warmup Iteration   2: 500.394 ops/s
# Warmup Iteration   3: 498.740 ops/s
# Warmup Iteration   4: 499.253 ops/s
Iteration   1: 499.498 ops/s
Iteration   2: 498.993 ops/s
Iteration   3: 498.949 ops/s
Iteration   4: 498.130 ops/s

# Run progress: 46.88% complete, ETA 00:57:10
# Fork: 4 of 4
# Warmup Iteration   1: 464.702 ops/s
# Warmup Iteration   2: 499.767 ops/s
# Warmup Iteration   3: 499.142 ops/s
# Warmup Iteration   4: 499.652 ops/s
Iteration   1: 498.247 ops/s
Iteration   2: 499.153 ops/s
Iteration   3: 499.978 ops/s
Iteration   4: 499.280 ops/s


Result "json.bench.JmhReaderBench.bench":
  498.646 ±(99.9%) 3.766 ops/s [Average]
  (min, avg, max) = (492.572, 498.646, 503.800), stdev = 3.699
  CI (99.9%): [494.880, 502.412] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 128kb, processorName = circe-jackson)

# Run progress: 47.50% complete, ETA 00:56:30
# Fork: 1 of 4
# Warmup Iteration   1: 131.094 ops/s
# Warmup Iteration   2: 152.870 ops/s
# Warmup Iteration   3: 151.662 ops/s
# Warmup Iteration   4: 152.683 ops/s
Iteration   1: 150.849 ops/s
Iteration   2: 152.283 ops/s
Iteration   3: 151.982 ops/s
Iteration   4: 152.678 ops/s

# Run progress: 48.13% complete, ETA 00:55:50
# Fork: 2 of 4
# Warmup Iteration   1: 130.742 ops/s
# Warmup Iteration   2: 152.295 ops/s
# Warmup Iteration   3: 152.463 ops/s
# Warmup Iteration   4: 152.802 ops/s
Iteration   1: 152.718 ops/s
Iteration   2: 152.772 ops/s
Iteration   3: 152.862 ops/s
Iteration   4: 153.242 ops/s

# Run progress: 48.75% complete, ETA 00:55:09
# Fork: 3 of 4
# Warmup Iteration   1: 126.648 ops/s
# Warmup Iteration   2: 150.016 ops/s
# Warmup Iteration   3: 149.659 ops/s
# Warmup Iteration   4: 150.011 ops/s
Iteration   1: 150.225 ops/s
Iteration   2: 149.818 ops/s
Iteration   3: 150.126 ops/s
Iteration   4: 150.131 ops/s

# Run progress: 49.38% complete, ETA 00:54:29
# Fork: 4 of 4
# Warmup Iteration   1: 130.483 ops/s
# Warmup Iteration   2: 150.768 ops/s
# Warmup Iteration   3: 151.151 ops/s
# Warmup Iteration   4: 151.233 ops/s
Iteration   1: 150.993 ops/s
Iteration   2: 151.186 ops/s
Iteration   3: 150.990 ops/s
Iteration   4: 151.471 ops/s


Result "json.bench.JmhReaderBench.bench":
  151.520 ±(99.9%) 1.160 ops/s [Average]
  (min, avg, max) = (149.818, 151.520, 153.242), stdev = 1.139
  CI (99.9%): [150.360, 152.681] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 128kb, processorName = json4s-jackson)

# Run progress: 50.00% complete, ETA 00:53:49
# Fork: 1 of 4
# Warmup Iteration   1: 76.231 ops/s
# Warmup Iteration   2: 93.310 ops/s
# Warmup Iteration   3: 93.460 ops/s
# Warmup Iteration   4: 93.636 ops/s
Iteration   1: 94.129 ops/s
Iteration   2: 93.924 ops/s
Iteration   3: 93.570 ops/s
Iteration   4: 93.809 ops/s

# Run progress: 50.63% complete, ETA 00:53:08
# Fork: 2 of 4
# Warmup Iteration   1: 73.057 ops/s
# Warmup Iteration   2: 88.855 ops/s
# Warmup Iteration   3: 89.678 ops/s
# Warmup Iteration   4: 89.749 ops/s
Iteration   1: 89.436 ops/s
Iteration   2: 88.976 ops/s
Iteration   3: 89.370 ops/s
Iteration   4: 89.071 ops/s

# Run progress: 51.25% complete, ETA 00:52:28
# Fork: 3 of 4
# Warmup Iteration   1: 68.859 ops/s
# Warmup Iteration   2: 83.481 ops/s
# Warmup Iteration   3: 83.872 ops/s
# Warmup Iteration   4: 83.568 ops/s
Iteration   1: 83.910 ops/s
Iteration   2: 83.590 ops/s
Iteration   3: 83.353 ops/s
Iteration   4: 84.112 ops/s

# Run progress: 51.88% complete, ETA 00:51:48
# Fork: 4 of 4
# Warmup Iteration   1: 72.743 ops/s
# Warmup Iteration   2: 89.039 ops/s
# Warmup Iteration   3: 89.310 ops/s
# Warmup Iteration   4: 89.423 ops/s
Iteration   1: 89.718 ops/s
Iteration   2: 89.156 ops/s
Iteration   3: 89.342 ops/s
Iteration   4: 89.384 ops/s


Result "json.bench.JmhReaderBench.bench":
  89.053 ±(99.9%) 3.779 ops/s [Average]
  (min, avg, max) = (83.353, 89.053, 94.129), stdev = 3.711
  CI (99.9%): [85.274, 92.832] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 128kb, processorName = json4s-native)

# Run progress: 52.50% complete, ETA 00:51:07
# Fork: 1 of 4
# Warmup Iteration   1: 69.640 ops/s
# Warmup Iteration   2: 83.311 ops/s
# Warmup Iteration   3: 83.526 ops/s
# Warmup Iteration   4: 83.267 ops/s
Iteration   1: 83.596 ops/s
Iteration   2: 83.361 ops/s
Iteration   3: 83.415 ops/s
Iteration   4: 83.955 ops/s

# Run progress: 53.13% complete, ETA 00:50:27
# Fork: 2 of 4
# Warmup Iteration   1: 65.542 ops/s
# Warmup Iteration   2: 77.588 ops/s
# Warmup Iteration   3: 77.125 ops/s
# Warmup Iteration   4: 77.037 ops/s
Iteration   1: 77.037 ops/s
Iteration   2: 77.762 ops/s
Iteration   3: 77.194 ops/s
Iteration   4: 77.555 ops/s

# Run progress: 53.75% complete, ETA 00:49:47
# Fork: 3 of 4
# Warmup Iteration   1: 71.904 ops/s
# Warmup Iteration   2: 85.260 ops/s
# Warmup Iteration   3: 85.122 ops/s
# Warmup Iteration   4: 85.263 ops/s
Iteration   1: 85.470 ops/s
Iteration   2: 85.308 ops/s
Iteration   3: 85.522 ops/s
Iteration   4: 85.485 ops/s

# Run progress: 54.37% complete, ETA 00:49:07
# Fork: 4 of 4
# Warmup Iteration   1: 62.558 ops/s
# Warmup Iteration   2: 73.977 ops/s
# Warmup Iteration   3: 73.796 ops/s
# Warmup Iteration   4: 73.589 ops/s
Iteration   1: 74.035 ops/s
Iteration   2: 74.103 ops/s
Iteration   3: 73.896 ops/s
Iteration   4: 73.813 ops/s


Result "json.bench.JmhReaderBench.bench":
  80.094 ±(99.9%) 4.873 ops/s [Average]
  (min, avg, max) = (73.813, 80.094, 85.522), stdev = 4.786
  CI (99.9%): [75.221, 84.967] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 128kb, processorName = play-json)

# Run progress: 55.00% complete, ETA 00:48:26
# Fork: 1 of 4
# Warmup Iteration   1: 164.051 ops/s
# Warmup Iteration   2: 185.444 ops/s
# Warmup Iteration   3: 185.639 ops/s
# Warmup Iteration   4: 186.089 ops/s
Iteration   1: 185.723 ops/s
Iteration   2: 185.886 ops/s
Iteration   3: 186.833 ops/s
Iteration   4: 187.767 ops/s

# Run progress: 55.63% complete, ETA 00:47:46
# Fork: 2 of 4
# Warmup Iteration   1: 167.606 ops/s
# Warmup Iteration   2: 188.637 ops/s
# Warmup Iteration   3: 189.060 ops/s
# Warmup Iteration   4: 188.930 ops/s
Iteration   1: 189.205 ops/s
Iteration   2: 188.515 ops/s
Iteration   3: 188.285 ops/s
Iteration   4: 189.180 ops/s

# Run progress: 56.25% complete, ETA 00:47:06
# Fork: 3 of 4
# Warmup Iteration   1: 164.633 ops/s
# Warmup Iteration   2: 185.508 ops/s
# Warmup Iteration   3: 185.587 ops/s
# Warmup Iteration   4: 185.881 ops/s
Iteration   1: 185.455 ops/s
Iteration   2: 186.683 ops/s
Iteration   3: 186.960 ops/s
Iteration   4: 186.906 ops/s

# Run progress: 56.88% complete, ETA 00:46:25
# Fork: 4 of 4
# Warmup Iteration   1: 162.743 ops/s
# Warmup Iteration   2: 184.766 ops/s
# Warmup Iteration   3: 184.359 ops/s
# Warmup Iteration   4: 184.054 ops/s
Iteration   1: 184.490 ops/s
Iteration   2: 184.532 ops/s
Iteration   3: 185.417 ops/s
Iteration   4: 185.902 ops/s


Result "json.bench.JmhReaderBench.bench":
  186.734 ±(99.9%) 1.545 ops/s [Average]
  (min, avg, max) = (184.490, 186.734, 189.205), stdev = 1.517
  CI (99.9%): [185.189, 188.278] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 128kb, processorName = spray-json)

# Run progress: 57.50% complete, ETA 00:45:45
# Fork: 1 of 4
# Warmup Iteration   1: 332.477 ops/s
# Warmup Iteration   2: 350.615 ops/s
# Warmup Iteration   3: 349.267 ops/s
# Warmup Iteration   4: 351.696 ops/s
Iteration   1: 350.526 ops/s
Iteration   2: 350.829 ops/s
Iteration   3: 350.891 ops/s
Iteration   4: 350.181 ops/s

# Run progress: 58.13% complete, ETA 00:45:05
# Fork: 2 of 4
# Warmup Iteration   1: 330.053 ops/s
# Warmup Iteration   2: 346.306 ops/s
# Warmup Iteration   3: 347.624 ops/s
# Warmup Iteration   4: 347.093 ops/s
Iteration   1: 346.350 ops/s
Iteration   2: 348.193 ops/s
Iteration   3: 346.475 ops/s
Iteration   4: 347.190 ops/s

# Run progress: 58.75% complete, ETA 00:44:24
# Fork: 3 of 4
# Warmup Iteration   1: 328.308 ops/s
# Warmup Iteration   2: 345.777 ops/s
# Warmup Iteration   3: 347.263 ops/s
# Warmup Iteration   4: 346.856 ops/s
Iteration   1: 344.256 ops/s
Iteration   2: 347.354 ops/s
Iteration   3: 346.715 ops/s
Iteration   4: 346.547 ops/s

# Run progress: 59.38% complete, ETA 00:43:44
# Fork: 4 of 4
# Warmup Iteration   1: 314.633 ops/s
# Warmup Iteration   2: 345.681 ops/s
# Warmup Iteration   3: 347.667 ops/s
# Warmup Iteration   4: 348.049 ops/s
Iteration   1: 347.954 ops/s
Iteration   2: 348.309 ops/s
Iteration   3: 344.894 ops/s
Iteration   4: 347.329 ops/s


Result "json.bench.JmhReaderBench.bench":
  347.749 ±(99.9%) 2.047 ops/s [Average]
  (min, avg, max) = (344.256, 347.749, 350.891), stdev = 2.010
  CI (99.9%): [345.702, 349.796] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 1mb, processorName = tethys-jackson)

# Run progress: 60.00% complete, ETA 00:43:04
# Fork: 1 of 4
# Warmup Iteration   1: 69.870 ops/s
# Warmup Iteration   2: 76.192 ops/s
# Warmup Iteration   3: 76.614 ops/s
# Warmup Iteration   4: 76.108 ops/s
Iteration   1: 76.107 ops/s
Iteration   2: 76.217 ops/s
Iteration   3: 76.387 ops/s
Iteration   4: 76.550 ops/s

# Run progress: 60.62% complete, ETA 00:42:23
# Fork: 2 of 4
# Warmup Iteration   1: 69.637 ops/s
# Warmup Iteration   2: 76.385 ops/s
# Warmup Iteration   3: 76.811 ops/s
# Warmup Iteration   4: 76.466 ops/s
Iteration   1: 76.342 ops/s
Iteration   2: 76.681 ops/s
Iteration   3: 76.991 ops/s
Iteration   4: 76.637 ops/s

# Run progress: 61.25% complete, ETA 00:41:43
# Fork: 3 of 4
# Warmup Iteration   1: 68.809 ops/s
# Warmup Iteration   2: 74.397 ops/s
# Warmup Iteration   3: 74.262 ops/s
# Warmup Iteration   4: 74.554 ops/s
Iteration   1: 74.615 ops/s
Iteration   2: 74.492 ops/s
Iteration   3: 73.932 ops/s
Iteration   4: 74.342 ops/s

# Run progress: 61.88% complete, ETA 00:41:03
# Fork: 4 of 4
# Warmup Iteration   1: 68.983 ops/s
# Warmup Iteration   2: 74.574 ops/s
# Warmup Iteration   3: 74.790 ops/s
# Warmup Iteration   4: 74.482 ops/s
Iteration   1: 74.645 ops/s
Iteration   2: 74.946 ops/s
Iteration   3: 74.430 ops/s
Iteration   4: 74.626 ops/s


Result "json.bench.JmhReaderBench.bench":
  75.496 ±(99.9%) 1.082 ops/s [Average]
  (min, avg, max) = (73.932, 75.496, 76.991), stdev = 1.063
  CI (99.9%): [74.414, 76.578] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 1mb, processorName = pure-jackson)

# Run progress: 62.50% complete, ETA 00:40:22
# Fork: 1 of 4
# Warmup Iteration   1: 87.261 ops/s
# Warmup Iteration   2: 94.728 ops/s
# Warmup Iteration   3: 96.075 ops/s
# Warmup Iteration   4: 95.583 ops/s
Iteration   1: 95.542 ops/s
Iteration   2: 95.050 ops/s
Iteration   3: 96.062 ops/s
Iteration   4: 95.628 ops/s

# Run progress: 63.13% complete, ETA 00:39:42
# Fork: 2 of 4
# Warmup Iteration   1: 87.023 ops/s
# Warmup Iteration   2: 94.026 ops/s
# Warmup Iteration   3: 94.585 ops/s
# Warmup Iteration   4: 94.502 ops/s
Iteration   1: 94.306 ops/s
Iteration   2: 94.874 ops/s
Iteration   3: 94.437 ops/s
Iteration   4: 94.477 ops/s

# Run progress: 63.75% complete, ETA 00:39:02
# Fork: 3 of 4
# Warmup Iteration   1: 87.291 ops/s
# Warmup Iteration   2: 94.565 ops/s
# Warmup Iteration   3: 95.410 ops/s
# Warmup Iteration   4: 95.416 ops/s
Iteration   1: 95.515 ops/s
Iteration   2: 95.028 ops/s
Iteration   3: 94.484 ops/s
Iteration   4: 94.936 ops/s

# Run progress: 64.38% complete, ETA 00:38:21
# Fork: 4 of 4
# Warmup Iteration   1: 87.294 ops/s
# Warmup Iteration   2: 95.155 ops/s
# Warmup Iteration   3: 95.628 ops/s
# Warmup Iteration   4: 94.859 ops/s
Iteration   1: 94.954 ops/s
Iteration   2: 95.332 ops/s
Iteration   3: 95.366 ops/s
Iteration   4: 95.068 ops/s


Result "json.bench.JmhReaderBench.bench":
  95.066 ±(99.9%) 0.501 ops/s [Average]
  (min, avg, max) = (94.306, 95.066, 96.062), stdev = 0.492
  CI (99.9%): [94.566, 95.567] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 1mb, processorName = circe-jawn)

# Run progress: 65.00% complete, ETA 00:37:41
# Fork: 1 of 4
# Warmup Iteration   1: 45.879 ops/s
# Warmup Iteration   2: 50.488 ops/s
# Warmup Iteration   3: 50.722 ops/s
# Warmup Iteration   4: 50.606 ops/s
Iteration   1: 50.770 ops/s
Iteration   2: 50.562 ops/s
Iteration   3: 50.698 ops/s
Iteration   4: 50.607 ops/s

# Run progress: 65.63% complete, ETA 00:37:01
# Fork: 2 of 4
# Warmup Iteration   1: 46.519 ops/s
# Warmup Iteration   2: 50.776 ops/s
# Warmup Iteration   3: 50.917 ops/s
# Warmup Iteration   4: 50.933 ops/s
Iteration   1: 51.066 ops/s
Iteration   2: 50.930 ops/s
Iteration   3: 50.934 ops/s
Iteration   4: 51.037 ops/s

# Run progress: 66.25% complete, ETA 00:36:21
# Fork: 3 of 4
# Warmup Iteration   1: 46.322 ops/s
# Warmup Iteration   2: 50.660 ops/s
# Warmup Iteration   3: 50.712 ops/s
# Warmup Iteration   4: 50.738 ops/s
Iteration   1: 50.868 ops/s
Iteration   2: 50.756 ops/s
Iteration   3: 51.112 ops/s
Iteration   4: 50.973 ops/s

# Run progress: 66.88% complete, ETA 00:35:40
# Fork: 4 of 4
# Warmup Iteration   1: 47.241 ops/s
# Warmup Iteration   2: 51.732 ops/s
# Warmup Iteration   3: 51.572 ops/s
# Warmup Iteration   4: 51.814 ops/s
Iteration   1: 51.976 ops/s
Iteration   2: 51.965 ops/s
Iteration   3: 51.867 ops/s
Iteration   4: 51.729 ops/s


Result "json.bench.JmhReaderBench.bench":
  51.116 ±(99.9%) 0.495 ops/s [Average]
  (min, avg, max) = (50.562, 51.116, 51.976), stdev = 0.486
  CI (99.9%): [50.620, 51.611] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 1mb, processorName = circe-jackson)

# Run progress: 67.50% complete, ETA 00:35:00
# Fork: 1 of 4
# Warmup Iteration   1: 13.567 ops/s
# Warmup Iteration   2: 15.711 ops/s
# Warmup Iteration   3: 15.596 ops/s
# Warmup Iteration   4: 15.685 ops/s
Iteration   1: 15.710 ops/s
Iteration   2: 15.597 ops/s
Iteration   3: 15.645 ops/s
Iteration   4: 15.671 ops/s

# Run progress: 68.13% complete, ETA 00:34:20
# Fork: 2 of 4
# Warmup Iteration   1: 14.332 ops/s
# Warmup Iteration   2: 16.397 ops/s
# Warmup Iteration   3: 16.410 ops/s
# Warmup Iteration   4: 16.442 ops/s
Iteration   1: 16.464 ops/s
Iteration   2: 16.465 ops/s
Iteration   3: 16.448 ops/s
Iteration   4: 16.495 ops/s

# Run progress: 68.75% complete, ETA 00:33:40
# Fork: 3 of 4
# Warmup Iteration   1: 14.723 ops/s
# Warmup Iteration   2: 17.012 ops/s
# Warmup Iteration   3: 17.033 ops/s
# Warmup Iteration   4: 17.030 ops/s
Iteration   1: 17.081 ops/s
Iteration   2: 17.036 ops/s
Iteration   3: 17.081 ops/s
Iteration   4: 17.125 ops/s

# Run progress: 69.38% complete, ETA 00:32:59
# Fork: 4 of 4
# Warmup Iteration   1: 14.110 ops/s
# Warmup Iteration   2: 16.223 ops/s
# Warmup Iteration   3: 16.258 ops/s
# Warmup Iteration   4: 16.284 ops/s
Iteration   1: 16.368 ops/s
Iteration   2: 16.252 ops/s
Iteration   3: 16.256 ops/s
Iteration   4: 16.264 ops/s


Result "json.bench.JmhReaderBench.bench":
  16.372 ±(99.9%) 0.536 ops/s [Average]
  (min, avg, max) = (15.597, 16.372, 17.125), stdev = 0.526
  CI (99.9%): [15.837, 16.908] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 1mb, processorName = json4s-jackson)

# Run progress: 70.00% complete, ETA 00:32:19
# Fork: 1 of 4
# Warmup Iteration   1: 8.786 ops/s
# Warmup Iteration   2: 10.881 ops/s
# Warmup Iteration   3: 10.918 ops/s
# Warmup Iteration   4: 10.872 ops/s
Iteration   1: 10.990 ops/s
Iteration   2: 10.945 ops/s
Iteration   3: 10.896 ops/s
Iteration   4: 10.922 ops/s

# Run progress: 70.63% complete, ETA 00:31:39
# Fork: 2 of 4
# Warmup Iteration   1: 8.647 ops/s
# Warmup Iteration   2: 10.668 ops/s
# Warmup Iteration   3: 10.699 ops/s
# Warmup Iteration   4: 10.730 ops/s
Iteration   1: 10.646 ops/s
Iteration   2: 10.660 ops/s
Iteration   3: 10.667 ops/s
Iteration   4: 10.684 ops/s

# Run progress: 71.25% complete, ETA 00:30:59
# Fork: 3 of 4
# Warmup Iteration   1: 8.465 ops/s
# Warmup Iteration   2: 10.361 ops/s
# Warmup Iteration   3: 10.424 ops/s
# Warmup Iteration   4: 10.387 ops/s
Iteration   1: 10.329 ops/s
Iteration   2: 10.441 ops/s
Iteration   3: 10.466 ops/s
Iteration   4: 10.381 ops/s

# Run progress: 71.88% complete, ETA 00:30:18
# Fork: 4 of 4
# Warmup Iteration   1: 8.278 ops/s
# Warmup Iteration   2: 10.063 ops/s
# Warmup Iteration   3: 10.091 ops/s
# Warmup Iteration   4: 10.081 ops/s
Iteration   1: 10.127 ops/s
Iteration   2: 10.166 ops/s
Iteration   3: 10.113 ops/s
Iteration   4: 10.106 ops/s


Result "json.bench.JmhReaderBench.bench":
  10.534 ±(99.9%) 0.319 ops/s [Average]
  (min, avg, max) = (10.106, 10.534, 10.990), stdev = 0.313
  CI (99.9%): [10.215, 10.852] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 1mb, processorName = json4s-native)

# Run progress: 72.50% complete, ETA 00:29:38
# Fork: 1 of 4
# Warmup Iteration   1: 7.580 ops/s
# Warmup Iteration   2: 9.197 ops/s
# Warmup Iteration   3: 9.196 ops/s
# Warmup Iteration   4: 9.227 ops/s
Iteration   1: 9.202 ops/s
Iteration   2: 9.233 ops/s
Iteration   3: 9.175 ops/s
Iteration   4: 9.211 ops/s

# Run progress: 73.13% complete, ETA 00:28:58
# Fork: 2 of 4
# Warmup Iteration   1: 7.647 ops/s
# Warmup Iteration   2: 9.249 ops/s
# Warmup Iteration   3: 9.266 ops/s
# Warmup Iteration   4: 9.240 ops/s
Iteration   1: 9.220 ops/s
Iteration   2: 9.195 ops/s
Iteration   3: 9.232 ops/s
Iteration   4: 9.261 ops/s

# Run progress: 73.75% complete, ETA 00:28:18
# Fork: 3 of 4
# Warmup Iteration   1: 7.539 ops/s
# Warmup Iteration   2: 9.140 ops/s
# Warmup Iteration   3: 9.082 ops/s
# Warmup Iteration   4: 9.078 ops/s
Iteration   1: 9.068 ops/s
Iteration   2: 9.058 ops/s
Iteration   3: 9.131 ops/s
Iteration   4: 9.128 ops/s

# Run progress: 74.38% complete, ETA 00:27:37
# Fork: 4 of 4
# Warmup Iteration   1: 7.703 ops/s
# Warmup Iteration   2: 9.319 ops/s
# Warmup Iteration   3: 9.346 ops/s
# Warmup Iteration   4: 9.351 ops/s
Iteration   1: 9.312 ops/s
Iteration   2: 9.349 ops/s
Iteration   3: 9.329 ops/s
Iteration   4: 9.233 ops/s


Result "json.bench.JmhReaderBench.bench":
  9.209 ±(99.9%) 0.086 ops/s [Average]
  (min, avg, max) = (9.058, 9.209, 9.349), stdev = 0.084
  CI (99.9%): [9.123, 9.294] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 1mb, processorName = play-json)

# Run progress: 75.00% complete, ETA 00:26:57
# Fork: 1 of 4
# Warmup Iteration   1: 14.551 ops/s
# Warmup Iteration   2: 17.306 ops/s
# Warmup Iteration   3: 17.362 ops/s
# Warmup Iteration   4: 17.361 ops/s
Iteration   1: 17.329 ops/s
Iteration   2: 17.358 ops/s
Iteration   3: 17.340 ops/s
Iteration   4: 17.338 ops/s

# Run progress: 75.63% complete, ETA 00:26:17
# Fork: 2 of 4
# Warmup Iteration   1: 15.024 ops/s
# Warmup Iteration   2: 17.534 ops/s
# Warmup Iteration   3: 17.539 ops/s
# Warmup Iteration   4: 17.563 ops/s
Iteration   1: 17.529 ops/s
Iteration   2: 17.548 ops/s
Iteration   3: 17.453 ops/s
Iteration   4: 17.566 ops/s

# Run progress: 76.25% complete, ETA 00:25:36
# Fork: 3 of 4
# Warmup Iteration   1: 14.703 ops/s
# Warmup Iteration   2: 16.927 ops/s
# Warmup Iteration   3: 17.045 ops/s
# Warmup Iteration   4: 16.960 ops/s
Iteration   1: 17.081 ops/s
Iteration   2: 16.962 ops/s
Iteration   3: 17.065 ops/s
Iteration   4: 17.079 ops/s

# Run progress: 76.88% complete, ETA 00:24:56
# Fork: 4 of 4
# Warmup Iteration   1: 14.500 ops/s
# Warmup Iteration   2: 17.300 ops/s
# Warmup Iteration   3: 17.329 ops/s
# Warmup Iteration   4: 17.314 ops/s
Iteration   1: 17.252 ops/s
Iteration   2: 17.198 ops/s
Iteration   3: 17.317 ops/s
Iteration   4: 17.343 ops/s


Result "json.bench.JmhReaderBench.bench":
  17.297 ±(99.9%) 0.185 ops/s [Average]
  (min, avg, max) = (16.962, 17.297, 17.566), stdev = 0.182
  CI (99.9%): [17.112, 17.483] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 1mb, processorName = spray-json)

# Run progress: 77.50% complete, ETA 00:24:16
# Fork: 1 of 4
# Warmup Iteration   1: 33.109 ops/s
# Warmup Iteration   2: 35.926 ops/s
# Warmup Iteration   3: 35.946 ops/s
# Warmup Iteration   4: 35.938 ops/s
Iteration   1: 35.973 ops/s
Iteration   2: 35.943 ops/s
Iteration   3: 35.950 ops/s
Iteration   4: 35.978 ops/s

# Run progress: 78.13% complete, ETA 00:23:35
# Fork: 2 of 4
# Warmup Iteration   1: 33.566 ops/s
# Warmup Iteration   2: 36.558 ops/s
# Warmup Iteration   3: 36.451 ops/s
# Warmup Iteration   4: 36.423 ops/s
Iteration   1: 36.490 ops/s
Iteration   2: 36.356 ops/s
Iteration   3: 36.390 ops/s
Iteration   4: 36.477 ops/s

# Run progress: 78.75% complete, ETA 00:22:55
# Fork: 3 of 4
# Warmup Iteration   1: 33.044 ops/s
# Warmup Iteration   2: 35.770 ops/s
# Warmup Iteration   3: 35.971 ops/s
# Warmup Iteration   4: 35.886 ops/s
Iteration   1: 35.952 ops/s
Iteration   2: 35.796 ops/s
Iteration   3: 35.766 ops/s
Iteration   4: 35.866 ops/s

# Run progress: 79.38% complete, ETA 00:22:14
# Fork: 4 of 4
# Warmup Iteration   1: 34.574 ops/s
# Warmup Iteration   2: 36.872 ops/s
# Warmup Iteration   3: 37.032 ops/s
# Warmup Iteration   4: 37.060 ops/s
Iteration   1: 37.015 ops/s
Iteration   2: 36.867 ops/s
Iteration   3: 37.053 ops/s
Iteration   4: 36.928 ops/s


Result "json.bench.JmhReaderBench.bench":
  36.300 ±(99.9%) 0.469 ops/s [Average]
  (min, avg, max) = (35.766, 36.300, 37.053), stdev = 0.461
  CI (99.9%): [35.831, 36.769] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 32mb, processorName = tethys-jackson)

# Run progress: 80.00% complete, ETA 00:21:34
# Fork: 1 of 4
# Warmup Iteration   1: 1.901 ops/s
# Warmup Iteration   2: 2.068 ops/s
# Warmup Iteration   3: 2.076 ops/s
# Warmup Iteration   4: 1.981 ops/s
Iteration   1: 2.069 ops/s
Iteration   2: 1.983 ops/s
Iteration   3: 2.103 ops/s
Iteration   4: 2.111 ops/s

# Run progress: 80.63% complete, ETA 00:20:54
# Fork: 2 of 4
# Warmup Iteration   1: 1.771 ops/s
# Warmup Iteration   2: 2.030 ops/s
# Warmup Iteration   3: 2.114 ops/s
# Warmup Iteration   4: 2.070 ops/s
Iteration   1: 2.090 ops/s
Iteration   2: 2.083 ops/s
Iteration   3: 2.057 ops/s
Iteration   4: 2.074 ops/s

# Run progress: 81.25% complete, ETA 00:20:15
# Fork: 3 of 4
# Warmup Iteration   1: 1.872 ops/s
# Warmup Iteration   2: 2.007 ops/s
# Warmup Iteration   3: 2.064 ops/s
# Warmup Iteration   4: 2.082 ops/s
Iteration   1: 2.058 ops/s
Iteration   2: 2.075 ops/s
Iteration   3: 2.107 ops/s
Iteration   4: 2.120 ops/s

# Run progress: 81.88% complete, ETA 00:19:35
# Fork: 4 of 4
# Warmup Iteration   1: 1.875 ops/s
# Warmup Iteration   2: 2.124 ops/s
# Warmup Iteration   3: 2.039 ops/s
# Warmup Iteration   4: 2.098 ops/s
Iteration   1: 2.017 ops/s
Iteration   2: 2.125 ops/s
Iteration   3: 2.097 ops/s
Iteration   4: 2.022 ops/s


Result "json.bench.JmhReaderBench.bench":
  2.074 ±(99.9%) 0.040 ops/s [Average]
  (min, avg, max) = (1.983, 2.074, 2.125), stdev = 0.040
  CI (99.9%): [2.034, 2.115] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 32mb, processorName = pure-jackson)

# Run progress: 82.50% complete, ETA 00:18:55
# Fork: 1 of 4
# Warmup Iteration   1: 1.695 ops/s
# Warmup Iteration   2: 1.770 ops/s
# Warmup Iteration   3: 1.939 ops/s
# Warmup Iteration   4: 1.957 ops/s
Iteration   1: 1.888 ops/s
Iteration   2: 1.905 ops/s
Iteration   3: 1.926 ops/s
Iteration   4: 1.832 ops/s

# Run progress: 83.13% complete, ETA 00:18:15
# Fork: 2 of 4
# Warmup Iteration   1: 1.577 ops/s
# Warmup Iteration   2: 1.783 ops/s
# Warmup Iteration   3: 1.991 ops/s
# Warmup Iteration   4: 1.927 ops/s
Iteration   1: 1.958 ops/s
Iteration   2: 1.987 ops/s
Iteration   3: 1.971 ops/s
Iteration   4: 1.865 ops/s

# Run progress: 83.75% complete, ETA 00:17:35
# Fork: 3 of 4
# Warmup Iteration   1: 1.649 ops/s
# Warmup Iteration   2: 1.889 ops/s
# Warmup Iteration   3: 1.927 ops/s
# Warmup Iteration   4: 1.872 ops/s
Iteration   1: 1.974 ops/s
Iteration   2: 1.968 ops/s
Iteration   3: 1.993 ops/s
Iteration   4: 1.813 ops/s

# Run progress: 84.38% complete, ETA 00:16:55
# Fork: 4 of 4
# Warmup Iteration   1: 1.572 ops/s
# Warmup Iteration   2: 1.902 ops/s
# Warmup Iteration   3: 1.905 ops/s
# Warmup Iteration   4: 1.843 ops/s
Iteration   1: 1.979 ops/s
Iteration   2: 1.924 ops/s
Iteration   3: 1.985 ops/s
Iteration   4: 1.900 ops/s


Result "json.bench.JmhReaderBench.bench":
  1.929 ±(99.9%) 0.058 ops/s [Average]
  (min, avg, max) = (1.813, 1.929, 1.993), stdev = 0.057
  CI (99.9%): [1.871, 1.988] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 32mb, processorName = circe-jawn)

# Run progress: 85.00% complete, ETA 00:16:15
# Fork: 1 of 4
# Warmup Iteration   1: 0.179 ops/s
# Warmup Iteration   2: 0.220 ops/s
# Warmup Iteration   3: 0.238 ops/s
# Warmup Iteration   4: 0.238 ops/s
Iteration   1: 0.238 ops/s
Iteration   2: 0.235 ops/s
Iteration   3: 0.248 ops/s
Iteration   4: 0.227 ops/s

# Run progress: 85.63% complete, ETA 00:15:39
# Fork: 2 of 4
# Warmup Iteration   1: 0.224 ops/s
# Warmup Iteration   2: 0.219 ops/s
# Warmup Iteration   3: 0.216 ops/s
# Warmup Iteration   4: 0.199 ops/s
Iteration   1: 0.224 ops/s
Iteration   2: 0.227 ops/s
Iteration   3: 0.249 ops/s
Iteration   4: 0.248 ops/s

# Run progress: 86.25% complete, ETA 00:15:03
# Fork: 3 of 4
# Warmup Iteration   1: 0.186 ops/s
# Warmup Iteration   2: 0.217 ops/s
# Warmup Iteration   3: 0.223 ops/s
# Warmup Iteration   4: 0.199 ops/s
Iteration   1: 0.248 ops/s
Iteration   2: 0.238 ops/s
Iteration   3: 0.247 ops/s
Iteration   4: 0.237 ops/s

# Run progress: 86.88% complete, ETA 00:14:25
# Fork: 4 of 4
# Warmup Iteration   1: 0.193 ops/s
# Warmup Iteration   2: 0.224 ops/s
# Warmup Iteration   3: 0.217 ops/s
# Warmup Iteration   4: 0.200 ops/s
Iteration   1: 0.216 ops/s
Iteration   2: 0.216 ops/s
Iteration   3: 0.247 ops/s
Iteration   4: 0.245 ops/s


Result "json.bench.JmhReaderBench.bench":
  0.237 ±(99.9%) 0.012 ops/s [Average]
  (min, avg, max) = (0.216, 0.237, 0.249), stdev = 0.012
  CI (99.9%): [0.225, 0.249] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 32mb, processorName = circe-jackson)

# Run progress: 87.50% complete, ETA 00:13:47
# Fork: 1 of 4
# Warmup Iteration   1: 0.070 ops/s
# Warmup Iteration   2: 0.081 ops/s
# Warmup Iteration   3: 0.079 ops/s
# Warmup Iteration   4: 0.079 ops/s
Iteration   1: 0.097 ops/s
Iteration   2: 0.079 ops/s
Iteration   3: 0.083 ops/s
Iteration   4: 0.119 ops/s

# Run progress: 88.13% complete, ETA 00:13:13
# Fork: 2 of 4
# Warmup Iteration   1: 0.072 ops/s
# Warmup Iteration   2: 0.078 ops/s
# Warmup Iteration   3: 0.079 ops/s
# Warmup Iteration   4: 0.077 ops/s
Iteration   1: 0.089 ops/s
Iteration   2: 0.078 ops/s
Iteration   3: 0.079 ops/s
Iteration   4: 0.080 ops/s

# Run progress: 88.75% complete, ETA 00:12:39
# Fork: 3 of 4
# Warmup Iteration   1: 0.073 ops/s
# Warmup Iteration   2: 0.080 ops/s
# Warmup Iteration   3: 0.081 ops/s
# Warmup Iteration   4: 0.079 ops/s
Iteration   1: 0.081 ops/s
Iteration   2: 0.081 ops/s
Iteration   3: 0.119 ops/s
Iteration   4: 0.077 ops/s

# Run progress: 89.38% complete, ETA 00:12:04
# Fork: 4 of 4
# Warmup Iteration   1: 0.073 ops/s
# Warmup Iteration   2: 0.081 ops/s
# Warmup Iteration   3: 0.079 ops/s
# Warmup Iteration   4: 0.079 ops/s
Iteration   1: 0.079 ops/s
Iteration   2: 0.116 ops/s
Iteration   3: 0.076 ops/s
Iteration   4: 0.085 ops/s


Result "json.bench.JmhReaderBench.bench":
  0.089 ±(99.9%) 0.016 ops/s [Average]
  (min, avg, max) = (0.076, 0.089, 0.119), stdev = 0.016
  CI (99.9%): [0.073, 0.104] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 32mb, processorName = json4s-jackson)

# Run progress: 90.00% complete, ETA 00:11:27
# Fork: 1 of 4
# Warmup Iteration   1: 0.056 ops/s
# Warmup Iteration   2: 0.059 ops/s
# Warmup Iteration   3: 0.066 ops/s
# Warmup Iteration   4: 0.068 ops/s
Iteration   1: 0.069 ops/s
Iteration   2: 0.071 ops/s
Iteration   3: 0.070 ops/s
Iteration   4: 0.068 ops/s

# Run progress: 90.63% complete, ETA 00:10:53
# Fork: 2 of 4
# Warmup Iteration   1: 0.059 ops/s
# Warmup Iteration   2: 0.060 ops/s
# Warmup Iteration   3: 0.064 ops/s
# Warmup Iteration   4: 0.062 ops/s
Iteration   1: 0.064 ops/s
Iteration   2: 0.068 ops/s
Iteration   3: 0.073 ops/s
Iteration   4: 0.069 ops/s

# Run progress: 91.25% complete, ETA 00:10:17
# Fork: 3 of 4
# Warmup Iteration   1: 0.055 ops/s
# Warmup Iteration   2: 0.060 ops/s
# Warmup Iteration   3: 0.065 ops/s
# Warmup Iteration   4: 0.063 ops/s
Iteration   1: 0.064 ops/s
Iteration   2: 0.064 ops/s
Iteration   3: 0.065 ops/s
Iteration   4: 0.064 ops/s

# Run progress: 91.88% complete, ETA 00:09:41
# Fork: 4 of 4
# Warmup Iteration   1: 0.058 ops/s
# Warmup Iteration   2: 0.063 ops/s
# Warmup Iteration   3: 0.069 ops/s
# Warmup Iteration   4: 0.067 ops/s
Iteration   1: 0.063 ops/s
Iteration   2: 0.064 ops/s
Iteration   3: 0.063 ops/s
Iteration   4: 0.067 ops/s


Result "json.bench.JmhReaderBench.bench":
  0.067 ±(99.9%) 0.003 ops/s [Average]
  (min, avg, max) = (0.063, 0.067, 0.073), stdev = 0.003
  CI (99.9%): [0.064, 0.070] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 32mb, processorName = json4s-native)

# Run progress: 92.50% complete, ETA 00:09:03
# Fork: 1 of 4
# Warmup Iteration   1: 0.039 ops/s
# Warmup Iteration   2: 0.034 ops/s
# Warmup Iteration   3: 0.034 ops/s
# Warmup Iteration   4: 0.033 ops/s
Iteration   1: 0.034 ops/s
Iteration   2: 0.034 ops/s
Iteration   3: 0.034 ops/s
Iteration   4: 0.034 ops/s

# Run progress: 93.13% complete, ETA 00:08:31
# Fork: 2 of 4
# Warmup Iteration   1: 0.040 ops/s
# Warmup Iteration   2: 0.035 ops/s
# Warmup Iteration   3: 0.035 ops/s
# Warmup Iteration   4: 0.034 ops/s
Iteration   1: 0.034 ops/s
Iteration   2: 0.035 ops/s
Iteration   3: 0.035 ops/s
Iteration   4: 0.034 ops/s

# Run progress: 93.75% complete, ETA 00:07:57
# Fork: 3 of 4
# Warmup Iteration   1: 0.041 ops/s
# Warmup Iteration   2: 0.035 ops/s
# Warmup Iteration   3: 0.035 ops/s
# Warmup Iteration   4: 0.034 ops/s
Iteration   1: 0.035 ops/s
Iteration   2: 0.034 ops/s
Iteration   3: 0.035 ops/s
Iteration   4: 0.035 ops/s

# Run progress: 94.38% complete, ETA 00:07:20
# Fork: 4 of 4
# Warmup Iteration   1: 0.042 ops/s
# Warmup Iteration   2: 0.034 ops/s
# Warmup Iteration   3: 0.034 ops/s
# Warmup Iteration   4: 0.034 ops/s
Iteration   1: 0.034 ops/s
Iteration   2: 0.034 ops/s
Iteration   3: 0.035 ops/s
Iteration   4: 0.034 ops/s


Result "json.bench.JmhReaderBench.bench":
  0.034 ±(99.9%) 0.001 ops/s [Average]
  (min, avg, max) = (0.034, 0.034, 0.035), stdev = 0.001
  CI (99.9%): [0.034, 0.035] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 32mb, processorName = play-json)

# Run progress: 95.00% complete, ETA 00:06:41
# Fork: 1 of 4
# Warmup Iteration   1: 0.073 ops/s
# Warmup Iteration   2: 0.081 ops/s
# Warmup Iteration   3: 0.112 ops/s
# Warmup Iteration   4: 0.130 ops/s
Iteration   1: 0.082 ops/s
Iteration   2: 0.087 ops/s
Iteration   3: 0.085 ops/s
Iteration   4: 0.079 ops/s

# Run progress: 95.63% complete, ETA 00:05:52
# Fork: 2 of 4
# Warmup Iteration   1: 0.068 ops/s
# Warmup Iteration   2: 0.078 ops/s
# Warmup Iteration   3: 0.078 ops/s
# Warmup Iteration   4: 0.073 ops/s
Iteration   1: 0.077 ops/s
Iteration   2: 0.079 ops/s
Iteration   3: 0.085 ops/s
Iteration   4: 0.079 ops/s

# Run progress: 96.25% complete, ETA 00:05:04
# Fork: 3 of 4
# Warmup Iteration   1: 0.071 ops/s
# Warmup Iteration   2: 0.077 ops/s
# Warmup Iteration   3: 0.085 ops/s
# Warmup Iteration   4: 0.072 ops/s
Iteration   1: 0.074 ops/s
Iteration   2: 0.081 ops/s
Iteration   3: 0.080 ops/s
Iteration   4: 0.079 ops/s

# Run progress: 96.88% complete, ETA 00:04:15
# Fork: 4 of 4
# Warmup Iteration   1: 0.071 ops/s
# Warmup Iteration   2: 0.104 ops/s
# Warmup Iteration   3: 0.084 ops/s
# Warmup Iteration   4: 0.076 ops/s
Iteration   1: 0.079 ops/s
Iteration   2: 0.084 ops/s
Iteration   3: 0.078 ops/s
Iteration   4: 0.085 ops/s


Result "json.bench.JmhReaderBench.bench":
  0.081 ±(99.9%) 0.004 ops/s [Average]
  (min, avg, max) = (0.074, 0.081, 0.087), stdev = 0.004
  CI (99.9%): [0.077, 0.084] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhReaderBench.bench
# Parameters: (jsonSize = 32mb, processorName = spray-json)

# Run progress: 97.50% complete, ETA 00:03:25
# Fork: 1 of 4
# Warmup Iteration   1: 0.263 ops/s
# Warmup Iteration   2: 0.390 ops/s
# Warmup Iteration   3: 0.310 ops/s
# Warmup Iteration   4: 0.403 ops/s
Iteration   1: 0.328 ops/s
Iteration   2: 0.351 ops/s
Iteration   3: 0.350 ops/s
Iteration   4: 0.354 ops/s

# Run progress: 98.13% complete, ETA 00:02:34
# Fork: 2 of 4
# Warmup Iteration   1: 0.252 ops/s
# Warmup Iteration   2: 0.381 ops/s
# Warmup Iteration   3: 0.296 ops/s
# Warmup Iteration   4: 0.379 ops/s
Iteration   1: 0.282 ops/s
Iteration   2: 0.381 ops/s
Iteration   3: 0.332 ops/s
Iteration   4: 0.381 ops/s

# Run progress: 98.75% complete, ETA 00:01:42
# Fork: 3 of 4
# Warmup Iteration   1: 0.263 ops/s
# Warmup Iteration   2: 0.380 ops/s
# Warmup Iteration   3: 0.319 ops/s
# Warmup Iteration   4: 0.375 ops/s
Iteration   1: 0.291 ops/s
Iteration   2: 0.379 ops/s
Iteration   3: 0.328 ops/s
Iteration   4: 0.377 ops/s

# Run progress: 99.38% complete, ETA 00:00:51
# Fork: 4 of 4
# Warmup Iteration   1: 0.264 ops/s
# Warmup Iteration   2: 0.385 ops/s
# Warmup Iteration   3: 0.299 ops/s
# Warmup Iteration   4: 0.377 ops/s
Iteration   1: 0.286 ops/s
Iteration   2: 0.379 ops/s
Iteration   3: 0.331 ops/s
Iteration   4: 0.388 ops/s


Result "json.bench.JmhReaderBench.bench":
  0.345 ±(99.9%) 0.036 ops/s [Average]
  (min, avg, max) = (0.282, 0.345, 0.388), stdev = 0.036
  CI (99.9%): [0.309, 0.381] (assumes normal distribution)


# Run complete. Total time: 02:17:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark             (jsonSize)  (processorName)   Mode  Cnt       Score       Error  Units
JmhReaderBench.bench        128b   tethys-jackson  thrpt   16  658951.389 ± 10409.795  ops/s
JmhReaderBench.bench        128b     pure-jackson  thrpt   16  605937.562 ±  5578.447  ops/s
JmhReaderBench.bench        128b       circe-jawn  thrpt   16  500633.274 ±  2620.895  ops/s
JmhReaderBench.bench        128b    circe-jackson  thrpt   16  176264.381 ±  3700.649  ops/s
JmhReaderBench.bench        128b   json4s-jackson  thrpt   16   81864.174 ±  1224.992  ops/s
JmhReaderBench.bench        128b    json4s-native  thrpt   16   77152.505 ±  2504.261  ops/s
JmhReaderBench.bench        128b        play-json  thrpt   16  214148.365 ±  1853.803  ops/s
JmhReaderBench.bench        128b       spray-json  thrpt   16  351719.553 ±  1143.099  ops/s
JmhReaderBench.bench         1kb   tethys-jackson  thrpt   16   94736.726 ±  1854.179  ops/s
JmhReaderBench.bench         1kb     pure-jackson  thrpt   16  105919.836 ±  1401.072  ops/s
JmhReaderBench.bench         1kb       circe-jawn  thrpt   16   66962.275 ±   291.910  ops/s
JmhReaderBench.bench         1kb    circe-jackson  thrpt   16   25799.317 ±   162.343  ops/s
JmhReaderBench.bench         1kb   json4s-jackson  thrpt   16   12649.038 ±   323.720  ops/s
JmhReaderBench.bench         1kb    json4s-native  thrpt   16   11726.397 ±   136.414  ops/s
JmhReaderBench.bench         1kb        play-json  thrpt   16   28851.521 ±   685.392  ops/s
JmhReaderBench.bench         1kb       spray-json  thrpt   16   47149.179 ±   666.593  ops/s
JmhReaderBench.bench       128kb   tethys-jackson  thrpt   16     733.012 ±     5.142  ops/s
JmhReaderBench.bench       128kb     pure-jackson  thrpt   16     868.511 ±    12.146  ops/s
JmhReaderBench.bench       128kb       circe-jawn  thrpt   16     498.646 ±     3.766  ops/s
JmhReaderBench.bench       128kb    circe-jackson  thrpt   16     151.520 ±     1.160  ops/s
JmhReaderBench.bench       128kb   json4s-jackson  thrpt   16      89.053 ±     3.779  ops/s
JmhReaderBench.bench       128kb    json4s-native  thrpt   16      80.094 ±     4.873  ops/s
JmhReaderBench.bench       128kb        play-json  thrpt   16     186.734 ±     1.545  ops/s
JmhReaderBench.bench       128kb       spray-json  thrpt   16     347.749 ±     2.047  ops/s
JmhReaderBench.bench         1mb   tethys-jackson  thrpt   16      75.496 ±     1.082  ops/s
JmhReaderBench.bench         1mb     pure-jackson  thrpt   16      95.066 ±     0.501  ops/s
JmhReaderBench.bench         1mb       circe-jawn  thrpt   16      51.116 ±     0.495  ops/s
JmhReaderBench.bench         1mb    circe-jackson  thrpt   16      16.372 ±     0.536  ops/s
JmhReaderBench.bench         1mb   json4s-jackson  thrpt   16      10.534 ±     0.319  ops/s
JmhReaderBench.bench         1mb    json4s-native  thrpt   16       9.209 ±     0.086  ops/s
JmhReaderBench.bench         1mb        play-json  thrpt   16      17.297 ±     0.185  ops/s
JmhReaderBench.bench         1mb       spray-json  thrpt   16      36.300 ±     0.469  ops/s
JmhReaderBench.bench        32mb   tethys-jackson  thrpt   16       2.074 ±     0.040  ops/s
JmhReaderBench.bench        32mb     pure-jackson  thrpt   16       1.929 ±     0.058  ops/s
JmhReaderBench.bench        32mb       circe-jawn  thrpt   16       0.237 ±     0.012  ops/s
JmhReaderBench.bench        32mb    circe-jackson  thrpt   16       0.089 ±     0.016  ops/s
JmhReaderBench.bench        32mb   json4s-jackson  thrpt   16       0.067 ±     0.003  ops/s
JmhReaderBench.bench        32mb    json4s-native  thrpt   16       0.034 ±     0.001  ops/s
JmhReaderBench.bench        32mb        play-json  thrpt   16       0.081 ±     0.004  ops/s
JmhReaderBench.bench        32mb       spray-json  thrpt   16       0.345 ±     0.036  ops/s

Benchmark result is saved to /home/alex/projects/tethys/./modules/benchmarks/jmh-reader.json
