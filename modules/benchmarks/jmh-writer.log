# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 128b, processorName = tethys-jackson)

# Run progress: 0.00% complete, ETA 02:00:00
# Fork: 1 of 4
# Warmup Iteration   1: 880966.095 ops/s
# Warmup Iteration   2: 938942.825 ops/s
# Warmup Iteration   3: 938394.492 ops/s
# Warmup Iteration   4: 934700.822 ops/s
Iteration   1: 934391.007 ops/s
Iteration   2: 936312.521 ops/s
Iteration   3: 937556.279 ops/s
Iteration   4: 938562.177 ops/s

# Run progress: 0.56% complete, ETA 02:00:33
# Fork: 2 of 4
# Warmup Iteration   1: 874264.695 ops/s
# Warmup Iteration   2: 926263.996 ops/s
# Warmup Iteration   3: 928167.678 ops/s
# Warmup Iteration   4: 926504.483 ops/s
Iteration   1: 923665.431 ops/s
Iteration   2: 928321.337 ops/s
Iteration   3: 928989.548 ops/s
Iteration   4: 928280.203 ops/s

# Run progress: 1.11% complete, ETA 01:59:45
# Fork: 3 of 4
# Warmup Iteration   1: 880943.137 ops/s
# Warmup Iteration   2: 929773.012 ops/s
# Warmup Iteration   3: 931883.090 ops/s
# Warmup Iteration   4: 931834.229 ops/s
Iteration   1: 931865.023 ops/s
Iteration   2: 932013.505 ops/s
Iteration   3: 929978.604 ops/s
Iteration   4: 931718.157 ops/s

# Run progress: 1.67% complete, ETA 01:59:02
# Fork: 4 of 4
# Warmup Iteration   1: 887208.603 ops/s
# Warmup Iteration   2: 940649.101 ops/s
# Warmup Iteration   3: 939703.336 ops/s
# Warmup Iteration   4: 938588.397 ops/s
Iteration   1: 939687.547 ops/s
Iteration   2: 939861.054 ops/s
Iteration   3: 938392.349 ops/s
Iteration   4: 938398.628 ops/s


Result "json.bench.JmhWriterBench.bench":
  933624.586 ±(99.9%) 5048.703 ops/s [Average]
  (min, avg, max) = (923665.431, 933624.586, 939861.054), stdev = 4958.501
  CI (99.9%): [928575.883, 938673.288] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 128b, processorName = pure-jackson)

# Run progress: 2.22% complete, ETA 01:58:20
# Fork: 1 of 4
# Warmup Iteration   1: 521066.452 ops/s
# Warmup Iteration   2: 566745.695 ops/s
# Warmup Iteration   3: 567640.873 ops/s
# Warmup Iteration   4: 566331.376 ops/s
Iteration   1: 568067.184 ops/s
Iteration   2: 565062.157 ops/s
Iteration   3: 567110.019 ops/s
Iteration   4: 568047.564 ops/s

# Run progress: 2.78% complete, ETA 01:57:40
# Fork: 2 of 4
# Warmup Iteration   1: 521518.015 ops/s
# Warmup Iteration   2: 564288.333 ops/s
# Warmup Iteration   3: 564732.809 ops/s
# Warmup Iteration   4: 564164.711 ops/s
Iteration   1: 564294.152 ops/s
Iteration   2: 565781.977 ops/s
Iteration   3: 565069.123 ops/s
Iteration   4: 563388.132 ops/s

# Run progress: 3.33% complete, ETA 01:56:59
# Fork: 3 of 4
# Warmup Iteration   1: 521144.724 ops/s
# Warmup Iteration   2: 562082.344 ops/s
# Warmup Iteration   3: 563512.626 ops/s
# Warmup Iteration   4: 562359.239 ops/s
Iteration   1: 561833.801 ops/s
Iteration   2: 564997.907 ops/s
Iteration   3: 562663.989 ops/s
Iteration   4: 562704.978 ops/s

# Run progress: 3.89% complete, ETA 01:56:18
# Fork: 4 of 4
# Warmup Iteration   1: 517867.556 ops/s
# Warmup Iteration   2: 558347.484 ops/s
# Warmup Iteration   3: 559691.825 ops/s
# Warmup Iteration   4: 558213.231 ops/s
Iteration   1: 557925.093 ops/s
Iteration   2: 557345.419 ops/s
Iteration   3: 559419.740 ops/s
Iteration   4: 559159.821 ops/s


Result "json.bench.JmhWriterBench.bench":
  563304.441 ±(99.9%) 3482.829 ops/s [Average]
  (min, avg, max) = (557345.419, 563304.441, 568067.184), stdev = 3420.604
  CI (99.9%): [559821.612, 566787.270] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 128b, processorName = circe)

# Run progress: 4.44% complete, ETA 01:55:37
# Fork: 1 of 4
# Warmup Iteration   1: 559697.171 ops/s
# Warmup Iteration   2: 599699.128 ops/s
# Warmup Iteration   3: 600156.552 ops/s
# Warmup Iteration   4: 601913.098 ops/s
Iteration   1: 601479.982 ops/s
Iteration   2: 601040.427 ops/s
Iteration   3: 600073.003 ops/s
Iteration   4: 601962.802 ops/s

# Run progress: 5.00% complete, ETA 01:54:57
# Fork: 2 of 4
# Warmup Iteration   1: 571360.171 ops/s
# Warmup Iteration   2: 610634.844 ops/s
# Warmup Iteration   3: 611950.769 ops/s
# Warmup Iteration   4: 611939.451 ops/s
Iteration   1: 611485.598 ops/s
Iteration   2: 613991.553 ops/s
Iteration   3: 612260.604 ops/s
Iteration   4: 613350.619 ops/s

# Run progress: 5.56% complete, ETA 01:54:17
# Fork: 3 of 4
# Warmup Iteration   1: 597954.323 ops/s
# Warmup Iteration   2: 641610.001 ops/s
# Warmup Iteration   3: 643208.444 ops/s
# Warmup Iteration   4: 639853.707 ops/s
Iteration   1: 641608.225 ops/s
Iteration   2: 640244.486 ops/s
Iteration   3: 641682.548 ops/s
Iteration   4: 642197.950 ops/s

# Run progress: 6.11% complete, ETA 01:53:36
# Fork: 4 of 4
# Warmup Iteration   1: 589638.436 ops/s
# Warmup Iteration   2: 627832.096 ops/s
# Warmup Iteration   3: 632676.124 ops/s
# Warmup Iteration   4: 630986.355 ops/s
Iteration   1: 635604.212 ops/s
Iteration   2: 627244.795 ops/s
Iteration   3: 628848.534 ops/s
Iteration   4: 627900.059 ops/s


Result "json.bench.JmhWriterBench.bench":
  621310.962 ±(99.9%) 16389.224 ops/s [Average]
  (min, avg, max) = (600073.003, 621310.962, 642197.950), stdev = 16096.409
  CI (99.9%): [604921.739, 637700.186] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 128b, processorName = java.lang.StringBuilder)

# Run progress: 6.67% complete, ETA 01:52:56
# Fork: 1 of 4
# Warmup Iteration   1: 1324923.129 ops/s
# Warmup Iteration   2: 1374895.585 ops/s
# Warmup Iteration   3: 1374466.238 ops/s
# Warmup Iteration   4: 1371567.802 ops/s
Iteration   1: 1369797.065 ops/s
Iteration   2: 1371596.505 ops/s
Iteration   3: 1370143.713 ops/s
Iteration   4: 1372256.846 ops/s

# Run progress: 7.22% complete, ETA 01:52:15
# Fork: 2 of 4
# Warmup Iteration   1: 1329269.583 ops/s
# Warmup Iteration   2: 1376069.801 ops/s
# Warmup Iteration   3: 1370936.324 ops/s
# Warmup Iteration   4: 1374969.606 ops/s
Iteration   1: 1376137.788 ops/s
Iteration   2: 1373501.796 ops/s
Iteration   3: 1370039.090 ops/s
Iteration   4: 1376264.232 ops/s

# Run progress: 7.78% complete, ETA 01:51:35
# Fork: 3 of 4
# Warmup Iteration   1: 1308351.395 ops/s
# Warmup Iteration   2: 1354853.357 ops/s
# Warmup Iteration   3: 1359245.118 ops/s
# Warmup Iteration   4: 1359250.047 ops/s
Iteration   1: 1354793.453 ops/s
Iteration   2: 1358675.689 ops/s
Iteration   3: 1356390.966 ops/s
Iteration   4: 1361343.397 ops/s

# Run progress: 8.33% complete, ETA 01:50:55
# Fork: 4 of 4
# Warmup Iteration   1: 1308460.686 ops/s
# Warmup Iteration   2: 1359030.873 ops/s
# Warmup Iteration   3: 1359160.932 ops/s
# Warmup Iteration   4: 1359379.112 ops/s
Iteration   1: 1361750.356 ops/s
Iteration   2: 1357341.987 ops/s
Iteration   3: 1360233.065 ops/s
Iteration   4: 1363010.654 ops/s


Result "json.bench.JmhWriterBench.bench":
  1365829.788 ±(99.9%) 7485.740 ops/s [Average]
  (min, avg, max) = (1354793.453, 1365829.788, 1376264.232), stdev = 7351.998
  CI (99.9%): [1358344.048, 1373315.527] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 128b, processorName = scala.StringBuilder)

# Run progress: 8.89% complete, ETA 01:50:14
# Fork: 1 of 4
# Warmup Iteration   1: 1196167.049 ops/s
# Warmup Iteration   2: 1274037.127 ops/s
# Warmup Iteration   3: 1277677.894 ops/s
# Warmup Iteration   4: 1276988.468 ops/s
Iteration   1: 1278777.239 ops/s
Iteration   2: 1280142.005 ops/s
Iteration   3: 1276548.979 ops/s
Iteration   4: 1270587.307 ops/s

# Run progress: 9.44% complete, ETA 01:49:34
# Fork: 2 of 4
# Warmup Iteration   1: 1226712.825 ops/s
# Warmup Iteration   2: 1290354.119 ops/s
# Warmup Iteration   3: 1291183.255 ops/s
# Warmup Iteration   4: 1293939.910 ops/s
Iteration   1: 1293059.003 ops/s
Iteration   2: 1294255.064 ops/s
Iteration   3: 1296405.130 ops/s
Iteration   4: 1292365.271 ops/s

# Run progress: 10.00% complete, ETA 01:48:54
# Fork: 3 of 4
# Warmup Iteration   1: 1220191.061 ops/s
# Warmup Iteration   2: 1293872.661 ops/s
# Warmup Iteration   3: 1293722.146 ops/s
# Warmup Iteration   4: 1293369.680 ops/s
Iteration   1: 1295617.146 ops/s
Iteration   2: 1298043.524 ops/s
Iteration   3: 1294242.566 ops/s
Iteration   4: 1297634.860 ops/s

# Run progress: 10.56% complete, ETA 01:48:13
# Fork: 4 of 4
# Warmup Iteration   1: 1221082.026 ops/s
# Warmup Iteration   2: 1286401.192 ops/s
# Warmup Iteration   3: 1289628.368 ops/s
# Warmup Iteration   4: 1288502.090 ops/s
Iteration   1: 1285312.447 ops/s
Iteration   2: 1288392.834 ops/s
Iteration   3: 1285249.446 ops/s
Iteration   4: 1287950.961 ops/s


Result "json.bench.JmhWriterBench.bench":
  1288411.486 ±(99.9%) 8471.963 ops/s [Average]
  (min, avg, max) = (1270587.307, 1288411.486, 1298043.524), stdev = 8320.600
  CI (99.9%): [1279939.524, 1296883.449] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 128b, processorName = json4s-jackson)

# Run progress: 11.11% complete, ETA 01:47:33
# Fork: 1 of 4
# Warmup Iteration   1: 154806.323 ops/s
# Warmup Iteration   2: 187155.627 ops/s
# Warmup Iteration   3: 186852.090 ops/s
# Warmup Iteration   4: 186235.418 ops/s
Iteration   1: 186480.345 ops/s
Iteration   2: 187337.474 ops/s
Iteration   3: 187590.988 ops/s
Iteration   4: 186346.483 ops/s

# Run progress: 11.67% complete, ETA 01:46:53
# Fork: 2 of 4
# Warmup Iteration   1: 153648.972 ops/s
# Warmup Iteration   2: 185876.124 ops/s
# Warmup Iteration   3: 185054.943 ops/s
# Warmup Iteration   4: 186086.055 ops/s
Iteration   1: 185867.581 ops/s
Iteration   2: 185841.246 ops/s
Iteration   3: 186139.278 ops/s
Iteration   4: 185059.027 ops/s

# Run progress: 12.22% complete, ETA 01:46:12
# Fork: 3 of 4
# Warmup Iteration   1: 153396.324 ops/s
# Warmup Iteration   2: 184106.938 ops/s
# Warmup Iteration   3: 184137.160 ops/s
# Warmup Iteration   4: 184403.439 ops/s
Iteration   1: 183926.349 ops/s
Iteration   2: 182851.136 ops/s
Iteration   3: 184227.703 ops/s
Iteration   4: 183679.536 ops/s

# Run progress: 12.78% complete, ETA 01:45:32
# Fork: 4 of 4
# Warmup Iteration   1: 155568.235 ops/s
# Warmup Iteration   2: 187643.437 ops/s
# Warmup Iteration   3: 186541.994 ops/s
# Warmup Iteration   4: 187328.578 ops/s
Iteration   1: 187818.514 ops/s
Iteration   2: 187117.694 ops/s
Iteration   3: 187723.280 ops/s
Iteration   4: 187432.842 ops/s


Result "json.bench.JmhWriterBench.bench":
  185964.967 ±(99.9%) 1618.865 ops/s [Average]
  (min, avg, max) = (182851.136, 185964.967, 187818.514), stdev = 1589.942
  CI (99.9%): [184346.102, 187583.832] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 128b, processorName = json4s-native)

# Run progress: 13.33% complete, ETA 01:44:51
# Fork: 1 of 4
# Warmup Iteration   1: 154846.157 ops/s
# Warmup Iteration   2: 198306.798 ops/s
# Warmup Iteration   3: 197465.168 ops/s
# Warmup Iteration   4: 197048.775 ops/s
Iteration   1: 197708.554 ops/s
Iteration   2: 198206.403 ops/s
Iteration   3: 198354.975 ops/s
Iteration   4: 198037.496 ops/s

# Run progress: 13.89% complete, ETA 01:44:11
# Fork: 2 of 4
# Warmup Iteration   1: 154673.936 ops/s
# Warmup Iteration   2: 196339.480 ops/s
# Warmup Iteration   3: 197091.676 ops/s
# Warmup Iteration   4: 196606.875 ops/s
Iteration   1: 197516.443 ops/s
Iteration   2: 197001.343 ops/s
Iteration   3: 196789.065 ops/s
Iteration   4: 196856.867 ops/s

# Run progress: 14.44% complete, ETA 01:43:31
# Fork: 3 of 4
# Warmup Iteration   1: 156069.658 ops/s
# Warmup Iteration   2: 198545.205 ops/s
# Warmup Iteration   3: 199325.944 ops/s
# Warmup Iteration   4: 198810.621 ops/s
Iteration   1: 198119.064 ops/s
Iteration   2: 199012.403 ops/s
Iteration   3: 199303.703 ops/s
Iteration   4: 199683.720 ops/s

# Run progress: 15.00% complete, ETA 01:42:50
# Fork: 4 of 4
# Warmup Iteration   1: 154593.110 ops/s
# Warmup Iteration   2: 195169.539 ops/s
# Warmup Iteration   3: 195667.275 ops/s
# Warmup Iteration   4: 195587.846 ops/s
Iteration   1: 196246.048 ops/s
Iteration   2: 195382.451 ops/s
Iteration   3: 196298.683 ops/s
Iteration   4: 196203.821 ops/s


Result "json.bench.JmhWriterBench.bench":
  197545.065 ±(99.9%) 1248.966 ops/s [Average]
  (min, avg, max) = (195382.451, 197545.065, 199683.720), stdev = 1226.651
  CI (99.9%): [196296.099, 198794.031] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 128b, processorName = play-json)

# Run progress: 15.56% complete, ETA 01:42:10
# Fork: 1 of 4
# Warmup Iteration   1: 169102.423 ops/s
# Warmup Iteration   2: 194890.816 ops/s
# Warmup Iteration   3: 195932.214 ops/s
# Warmup Iteration   4: 195621.930 ops/s
Iteration   1: 196217.995 ops/s
Iteration   2: 193868.369 ops/s
Iteration   3: 195775.642 ops/s
Iteration   4: 194796.624 ops/s

# Run progress: 16.11% complete, ETA 01:41:30
# Fork: 2 of 4
# Warmup Iteration   1: 170370.733 ops/s
# Warmup Iteration   2: 196073.335 ops/s
# Warmup Iteration   3: 197310.486 ops/s
# Warmup Iteration   4: 197828.223 ops/s
Iteration   1: 197769.243 ops/s
Iteration   2: 197605.638 ops/s
Iteration   3: 198627.977 ops/s
Iteration   4: 198133.624 ops/s

# Run progress: 16.67% complete, ETA 01:40:49
# Fork: 3 of 4
# Warmup Iteration   1: 171096.418 ops/s
# Warmup Iteration   2: 196904.131 ops/s
# Warmup Iteration   3: 196921.442 ops/s
# Warmup Iteration   4: 197283.642 ops/s
Iteration   1: 196814.439 ops/s
Iteration   2: 198004.318 ops/s
Iteration   3: 197933.394 ops/s
Iteration   4: 196916.396 ops/s

# Run progress: 17.22% complete, ETA 01:40:09
# Fork: 4 of 4
# Warmup Iteration   1: 171677.138 ops/s
# Warmup Iteration   2: 197989.012 ops/s
# Warmup Iteration   3: 198346.338 ops/s
# Warmup Iteration   4: 198855.563 ops/s
Iteration   1: 198497.314 ops/s
Iteration   2: 198130.641 ops/s
Iteration   3: 198902.511 ops/s
Iteration   4: 198476.821 ops/s


Result "json.bench.JmhWriterBench.bench":
  197279.434 ±(99.9%) 1479.226 ops/s [Average]
  (min, avg, max) = (193868.369, 197279.434, 198902.511), stdev = 1452.798
  CI (99.9%): [195800.208, 198758.660] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 128b, processorName = spray-json)

# Run progress: 17.78% complete, ETA 01:39:29
# Fork: 1 of 4
# Warmup Iteration   1: 387379.695 ops/s
# Warmup Iteration   2: 416699.785 ops/s
# Warmup Iteration   3: 418289.438 ops/s
# Warmup Iteration   4: 416804.385 ops/s
Iteration   1: 417654.254 ops/s
Iteration   2: 416574.386 ops/s
Iteration   3: 418478.738 ops/s
Iteration   4: 418153.971 ops/s

# Run progress: 18.33% complete, ETA 01:38:48
# Fork: 2 of 4
# Warmup Iteration   1: 379160.496 ops/s
# Warmup Iteration   2: 405678.267 ops/s
# Warmup Iteration   3: 406486.675 ops/s
# Warmup Iteration   4: 405735.531 ops/s
Iteration   1: 406139.902 ops/s
Iteration   2: 406504.487 ops/s
Iteration   3: 406035.233 ops/s
Iteration   4: 405954.686 ops/s

# Run progress: 18.89% complete, ETA 01:38:08
# Fork: 3 of 4
# Warmup Iteration   1: 378798.619 ops/s
# Warmup Iteration   2: 406496.852 ops/s
# Warmup Iteration   3: 407139.447 ops/s
# Warmup Iteration   4: 406814.953 ops/s
Iteration   1: 407812.380 ops/s
Iteration   2: 407893.602 ops/s
Iteration   3: 406176.850 ops/s
Iteration   4: 406532.687 ops/s

# Run progress: 19.44% complete, ETA 01:37:27
# Fork: 4 of 4
# Warmup Iteration   1: 378864.928 ops/s
# Warmup Iteration   2: 405032.810 ops/s
# Warmup Iteration   3: 406437.614 ops/s
# Warmup Iteration   4: 405833.565 ops/s
Iteration   1: 404652.147 ops/s
Iteration   2: 404618.262 ops/s
Iteration   3: 406231.233 ops/s
Iteration   4: 405603.766 ops/s


Result "json.bench.JmhWriterBench.bench":
  409063.537 ±(99.9%) 5338.225 ops/s [Average]
  (min, avg, max) = (404618.262, 409063.537, 418478.738), stdev = 5242.851
  CI (99.9%): [403725.311, 414401.762] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 1kb, processorName = tethys-jackson)

# Run progress: 20.00% complete, ETA 01:36:47
# Fork: 1 of 4
# Warmup Iteration   1: 202987.369 ops/s
# Warmup Iteration   2: 212762.848 ops/s
# Warmup Iteration   3: 212327.734 ops/s
# Warmup Iteration   4: 212360.676 ops/s
Iteration   1: 214266.826 ops/s
Iteration   2: 214315.621 ops/s
Iteration   3: 213878.807 ops/s
Iteration   4: 213713.772 ops/s

# Run progress: 20.56% complete, ETA 01:36:07
# Fork: 2 of 4
# Warmup Iteration   1: 205770.036 ops/s
# Warmup Iteration   2: 215517.671 ops/s
# Warmup Iteration   3: 215995.490 ops/s
# Warmup Iteration   4: 215690.248 ops/s
Iteration   1: 214972.923 ops/s
Iteration   2: 215774.900 ops/s
Iteration   3: 215473.490 ops/s
Iteration   4: 216096.131 ops/s

# Run progress: 21.11% complete, ETA 01:35:26
# Fork: 3 of 4
# Warmup Iteration   1: 214338.854 ops/s
# Warmup Iteration   2: 222839.531 ops/s
# Warmup Iteration   3: 224244.087 ops/s
# Warmup Iteration   4: 223884.284 ops/s
Iteration   1: 223862.295 ops/s
Iteration   2: 223884.547 ops/s
Iteration   3: 223657.281 ops/s
Iteration   4: 223141.513 ops/s

# Run progress: 21.67% complete, ETA 01:34:46
# Fork: 4 of 4
# Warmup Iteration   1: 218635.403 ops/s
# Warmup Iteration   2: 227338.215 ops/s
# Warmup Iteration   3: 226606.673 ops/s
# Warmup Iteration   4: 227746.670 ops/s
Iteration   1: 227852.674 ops/s
Iteration   2: 227607.072 ops/s
Iteration   3: 227123.372 ops/s
Iteration   4: 228053.878 ops/s


Result "json.bench.JmhWriterBench.bench":
  220229.694 ±(99.9%) 5928.676 ops/s [Average]
  (min, avg, max) = (213713.772, 220229.694, 228053.878), stdev = 5822.752
  CI (99.9%): [214301.018, 226158.370] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 1kb, processorName = pure-jackson)

# Run progress: 22.22% complete, ETA 01:34:06
# Fork: 1 of 4
# Warmup Iteration   1: 168109.171 ops/s
# Warmup Iteration   2: 180083.901 ops/s
# Warmup Iteration   3: 179618.685 ops/s
# Warmup Iteration   4: 179588.337 ops/s
Iteration   1: 179578.212 ops/s
Iteration   2: 180036.044 ops/s
Iteration   3: 179466.378 ops/s
Iteration   4: 179631.439 ops/s

# Run progress: 22.78% complete, ETA 01:33:25
# Fork: 2 of 4
# Warmup Iteration   1: 166314.438 ops/s
# Warmup Iteration   2: 179617.581 ops/s
# Warmup Iteration   3: 179431.983 ops/s
# Warmup Iteration   4: 179434.899 ops/s
Iteration   1: 179880.427 ops/s
Iteration   2: 179803.004 ops/s
Iteration   3: 179482.198 ops/s
Iteration   4: 179741.303 ops/s

# Run progress: 23.33% complete, ETA 01:32:45
# Fork: 3 of 4
# Warmup Iteration   1: 167140.259 ops/s
# Warmup Iteration   2: 180139.921 ops/s
# Warmup Iteration   3: 179868.236 ops/s
# Warmup Iteration   4: 180054.273 ops/s
Iteration   1: 180154.377 ops/s
Iteration   2: 180180.815 ops/s
Iteration   3: 179924.645 ops/s
Iteration   4: 179902.646 ops/s

# Run progress: 23.89% complete, ETA 01:32:05
# Fork: 4 of 4
# Warmup Iteration   1: 165255.943 ops/s
# Warmup Iteration   2: 179315.423 ops/s
# Warmup Iteration   3: 178914.881 ops/s
# Warmup Iteration   4: 179001.033 ops/s
Iteration   1: 178814.877 ops/s
Iteration   2: 178806.418 ops/s
Iteration   3: 179380.087 ops/s
Iteration   4: 179222.022 ops/s


Result "json.bench.JmhWriterBench.bench":
  179625.306 ±(99.9%) 426.507 ops/s [Average]
  (min, avg, max) = (178806.418, 179625.306, 180180.815), stdev = 418.887
  CI (99.9%): [179198.799, 180051.812] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 1kb, processorName = circe)

# Run progress: 24.44% complete, ETA 01:31:24
# Fork: 1 of 4
# Warmup Iteration   1: 79446.474 ops/s
# Warmup Iteration   2: 85482.835 ops/s
# Warmup Iteration   3: 85293.627 ops/s
# Warmup Iteration   4: 85469.484 ops/s
Iteration   1: 85581.448 ops/s
Iteration   2: 85445.544 ops/s
Iteration   3: 85213.711 ops/s
Iteration   4: 85120.908 ops/s

# Run progress: 25.00% complete, ETA 01:30:44
# Fork: 2 of 4
# Warmup Iteration   1: 80174.570 ops/s
# Warmup Iteration   2: 86427.779 ops/s
# Warmup Iteration   3: 86126.710 ops/s
# Warmup Iteration   4: 86628.290 ops/s
Iteration   1: 86804.037 ops/s
Iteration   2: 86440.184 ops/s
Iteration   3: 86548.537 ops/s
Iteration   4: 86749.147 ops/s

# Run progress: 25.56% complete, ETA 01:30:04
# Fork: 3 of 4
# Warmup Iteration   1: 80485.259 ops/s
# Warmup Iteration   2: 86380.052 ops/s
# Warmup Iteration   3: 86449.518 ops/s
# Warmup Iteration   4: 86448.132 ops/s
Iteration   1: 86342.103 ops/s
Iteration   2: 86784.809 ops/s
Iteration   3: 86540.827 ops/s
Iteration   4: 86706.092 ops/s

# Run progress: 26.11% complete, ETA 01:29:23
# Fork: 4 of 4
# Warmup Iteration   1: 80386.966 ops/s
# Warmup Iteration   2: 86459.070 ops/s
# Warmup Iteration   3: 86644.141 ops/s
# Warmup Iteration   4: 86503.524 ops/s
Iteration   1: 86670.415 ops/s
Iteration   2: 86698.229 ops/s
Iteration   3: 86675.889 ops/s
Iteration   4: 86383.399 ops/s


Result "json.bench.JmhWriterBench.bench":
  86294.080 ±(99.9%) 602.778 ops/s [Average]
  (min, avg, max) = (85120.908, 86294.080, 86804.037), stdev = 592.008
  CI (99.9%): [85691.302, 86896.858] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 1kb, processorName = java.lang.StringBuilder)

# Run progress: 26.67% complete, ETA 01:28:43
# Fork: 1 of 4
# Warmup Iteration   1: 207045.356 ops/s
# Warmup Iteration   2: 216409.194 ops/s
# Warmup Iteration   3: 215776.688 ops/s
# Warmup Iteration   4: 215981.910 ops/s
Iteration   1: 216534.408 ops/s
Iteration   2: 214989.686 ops/s
Iteration   3: 216772.748 ops/s
Iteration   4: 215752.229 ops/s

# Run progress: 27.22% complete, ETA 01:28:03
# Fork: 2 of 4
# Warmup Iteration   1: 169686.634 ops/s
# Warmup Iteration   2: 179946.314 ops/s
# Warmup Iteration   3: 179975.535 ops/s
# Warmup Iteration   4: 179708.770 ops/s
Iteration   1: 180130.367 ops/s
Iteration   2: 180182.741 ops/s
Iteration   3: 179703.770 ops/s
Iteration   4: 179809.822 ops/s

# Run progress: 27.78% complete, ETA 01:27:22
# Fork: 3 of 4
# Warmup Iteration   1: 206481.890 ops/s
# Warmup Iteration   2: 213214.423 ops/s
# Warmup Iteration   3: 214691.935 ops/s
# Warmup Iteration   4: 213974.409 ops/s
Iteration   1: 214775.106 ops/s
Iteration   2: 213976.309 ops/s
Iteration   3: 214933.911 ops/s
Iteration   4: 215007.133 ops/s

# Run progress: 28.33% complete, ETA 01:26:42
# Fork: 4 of 4
# Warmup Iteration   1: 169997.289 ops/s
# Warmup Iteration   2: 180793.602 ops/s
# Warmup Iteration   3: 181573.400 ops/s
# Warmup Iteration   4: 181324.651 ops/s
Iteration   1: 181071.033 ops/s
Iteration   2: 181221.412 ops/s
Iteration   3: 180533.700 ops/s
Iteration   4: 181889.980 ops/s


Result "json.bench.JmhWriterBench.bench":
  197955.272 ±(99.9%) 18303.811 ops/s [Average]
  (min, avg, max) = (179703.770, 197955.272, 216772.748), stdev = 17976.789
  CI (99.9%): [179651.462, 216259.083] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 1kb, processorName = scala.StringBuilder)

# Run progress: 28.89% complete, ETA 01:26:02
# Fork: 1 of 4
# Warmup Iteration   1: 178247.569 ops/s
# Warmup Iteration   2: 189056.219 ops/s
# Warmup Iteration   3: 189468.201 ops/s
# Warmup Iteration   4: 188604.499 ops/s
Iteration   1: 190040.620 ops/s
Iteration   2: 189941.382 ops/s
Iteration   3: 189737.018 ops/s
Iteration   4: 188728.221 ops/s

# Run progress: 29.44% complete, ETA 01:25:21
# Fork: 2 of 4
# Warmup Iteration   1: 183730.630 ops/s
# Warmup Iteration   2: 190413.974 ops/s
# Warmup Iteration   3: 190637.997 ops/s
# Warmup Iteration   4: 191151.819 ops/s
Iteration   1: 190689.474 ops/s
Iteration   2: 190790.633 ops/s
Iteration   3: 190652.924 ops/s
Iteration   4: 190316.807 ops/s

# Run progress: 30.00% complete, ETA 01:24:41
# Fork: 3 of 4
# Warmup Iteration   1: 177607.079 ops/s
# Warmup Iteration   2: 189021.346 ops/s
# Warmup Iteration   3: 188809.357 ops/s
# Warmup Iteration   4: 189656.902 ops/s
Iteration   1: 189969.694 ops/s
Iteration   2: 188744.917 ops/s
Iteration   3: 188695.357 ops/s
Iteration   4: 189438.994 ops/s

# Run progress: 30.56% complete, ETA 01:24:01
# Fork: 4 of 4
# Warmup Iteration   1: 208666.519 ops/s
# Warmup Iteration   2: 215436.305 ops/s
# Warmup Iteration   3: 216117.806 ops/s
# Warmup Iteration   4: 215662.888 ops/s
Iteration   1: 216475.869 ops/s
Iteration   2: 216321.406 ops/s
Iteration   3: 217199.601 ops/s
Iteration   4: 216134.277 ops/s


Result "json.bench.JmhWriterBench.bench":
  196492.325 ±(99.9%) 12187.468 ops/s [Average]
  (min, avg, max) = (188695.357, 196492.325, 217199.601), stdev = 11969.723
  CI (99.9%): [184304.857, 208679.793] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 1kb, processorName = json4s-jackson)

# Run progress: 31.11% complete, ETA 01:23:21
# Fork: 1 of 4
# Warmup Iteration   1: 20645.040 ops/s
# Warmup Iteration   2: 24272.781 ops/s
# Warmup Iteration   3: 24647.755 ops/s
# Warmup Iteration   4: 24628.054 ops/s
Iteration   1: 24555.414 ops/s
Iteration   2: 24600.644 ops/s
Iteration   3: 24579.659 ops/s
Iteration   4: 24554.091 ops/s

# Run progress: 31.67% complete, ETA 01:22:40
# Fork: 2 of 4
# Warmup Iteration   1: 20693.269 ops/s
# Warmup Iteration   2: 24457.056 ops/s
# Warmup Iteration   3: 24547.088 ops/s
# Warmup Iteration   4: 24655.423 ops/s
Iteration   1: 24610.039 ops/s
Iteration   2: 24577.609 ops/s
Iteration   3: 24604.727 ops/s
Iteration   4: 24558.405 ops/s

# Run progress: 32.22% complete, ETA 01:22:00
# Fork: 3 of 4
# Warmup Iteration   1: 20434.618 ops/s
# Warmup Iteration   2: 24624.511 ops/s
# Warmup Iteration   3: 24566.471 ops/s
# Warmup Iteration   4: 24503.394 ops/s
Iteration   1: 24654.525 ops/s
Iteration   2: 24645.585 ops/s
Iteration   3: 24647.062 ops/s
Iteration   4: 24635.555 ops/s

# Run progress: 32.78% complete, ETA 01:21:20
# Fork: 4 of 4
# Warmup Iteration   1: 20588.756 ops/s
# Warmup Iteration   2: 24547.243 ops/s
# Warmup Iteration   3: 24705.374 ops/s
# Warmup Iteration   4: 24557.504 ops/s
Iteration   1: 24606.570 ops/s
Iteration   2: 24505.143 ops/s
Iteration   3: 24642.512 ops/s
Iteration   4: 24585.880 ops/s


Result "json.bench.JmhWriterBench.bench":
  24597.714 ±(99.9%) 42.682 ops/s [Average]
  (min, avg, max) = (24505.143, 24597.714, 24654.525), stdev = 41.919
  CI (99.9%): [24555.032, 24640.396] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 1kb, processorName = json4s-native)

# Run progress: 33.33% complete, ETA 01:20:39
# Fork: 1 of 4
# Warmup Iteration   1: 19759.788 ops/s
# Warmup Iteration   2: 25678.630 ops/s
# Warmup Iteration   3: 25771.581 ops/s
# Warmup Iteration   4: 25775.722 ops/s
Iteration   1: 25798.534 ops/s
Iteration   2: 25718.602 ops/s
Iteration   3: 25754.940 ops/s
Iteration   4: 25716.271 ops/s

# Run progress: 33.89% complete, ETA 01:19:59
# Fork: 2 of 4
# Warmup Iteration   1: 19625.983 ops/s
# Warmup Iteration   2: 25359.446 ops/s
# Warmup Iteration   3: 25401.433 ops/s
# Warmup Iteration   4: 25403.106 ops/s
Iteration   1: 25385.563 ops/s
Iteration   2: 25434.339 ops/s
Iteration   3: 25396.677 ops/s
Iteration   4: 25406.421 ops/s

# Run progress: 34.44% complete, ETA 01:19:19
# Fork: 3 of 4
# Warmup Iteration   1: 19861.001 ops/s
# Warmup Iteration   2: 25580.319 ops/s
# Warmup Iteration   3: 25644.706 ops/s
# Warmup Iteration   4: 25463.861 ops/s
Iteration   1: 25440.568 ops/s
Iteration   2: 25546.991 ops/s
Iteration   3: 25473.644 ops/s
Iteration   4: 25417.017 ops/s

# Run progress: 35.00% complete, ETA 01:18:38
# Fork: 4 of 4
# Warmup Iteration   1: 19836.642 ops/s
# Warmup Iteration   2: 25574.516 ops/s
# Warmup Iteration   3: 25583.444 ops/s
# Warmup Iteration   4: 25555.838 ops/s
Iteration   1: 25485.946 ops/s
Iteration   2: 25532.919 ops/s
Iteration   3: 25537.598 ops/s
Iteration   4: 25536.602 ops/s


Result "json.bench.JmhWriterBench.bench":
  25536.414 ±(99.9%) 139.522 ops/s [Average]
  (min, avg, max) = (25385.563, 25536.414, 25798.534), stdev = 137.030
  CI (99.9%): [25396.892, 25675.937] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 1kb, processorName = play-json)

# Run progress: 35.56% complete, ETA 01:17:58
# Fork: 1 of 4
# Warmup Iteration   1: 24836.903 ops/s
# Warmup Iteration   2: 28495.919 ops/s
# Warmup Iteration   3: 28419.644 ops/s
# Warmup Iteration   4: 28487.904 ops/s
Iteration   1: 28574.511 ops/s
Iteration   2: 28585.115 ops/s
Iteration   3: 28578.492 ops/s
Iteration   4: 28556.073 ops/s

# Run progress: 36.11% complete, ETA 01:17:18
# Fork: 2 of 4
# Warmup Iteration   1: 24777.300 ops/s
# Warmup Iteration   2: 28263.690 ops/s
# Warmup Iteration   3: 28295.366 ops/s
# Warmup Iteration   4: 28339.473 ops/s
Iteration   1: 28333.425 ops/s
Iteration   2: 28364.127 ops/s
Iteration   3: 28417.088 ops/s
Iteration   4: 28147.883 ops/s

# Run progress: 36.67% complete, ETA 01:16:37
# Fork: 3 of 4
# Warmup Iteration   1: 24632.391 ops/s
# Warmup Iteration   2: 28222.308 ops/s
# Warmup Iteration   3: 28260.278 ops/s
# Warmup Iteration   4: 28332.390 ops/s
Iteration   1: 28323.834 ops/s
Iteration   2: 28262.811 ops/s
Iteration   3: 28264.520 ops/s
Iteration   4: 28308.230 ops/s

# Run progress: 37.22% complete, ETA 01:15:57
# Fork: 4 of 4
# Warmup Iteration   1: 22478.021 ops/s
# Warmup Iteration   2: 25741.699 ops/s
# Warmup Iteration   3: 25744.631 ops/s
# Warmup Iteration   4: 25644.142 ops/s
Iteration   1: 25671.442 ops/s
Iteration   2: 25737.389 ops/s
Iteration   3: 25708.289 ops/s
Iteration   4: 25663.185 ops/s


Result "json.bench.JmhWriterBench.bench":
  27718.526 ±(99.9%) 1235.370 ops/s [Average]
  (min, avg, max) = (25663.185, 27718.526, 28585.115), stdev = 1213.298
  CI (99.9%): [26483.156, 28953.896] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 1kb, processorName = spray-json)

# Run progress: 37.78% complete, ETA 01:15:17
# Fork: 1 of 4
# Warmup Iteration   1: 50874.323 ops/s
# Warmup Iteration   2: 54978.050 ops/s
# Warmup Iteration   3: 54892.712 ops/s
# Warmup Iteration   4: 54886.155 ops/s
Iteration   1: 54946.717 ops/s
Iteration   2: 54799.975 ops/s
Iteration   3: 55045.661 ops/s
Iteration   4: 54976.491 ops/s

# Run progress: 38.33% complete, ETA 01:14:36
# Fork: 2 of 4
# Warmup Iteration   1: 50834.842 ops/s
# Warmup Iteration   2: 54455.354 ops/s
# Warmup Iteration   3: 54502.562 ops/s
# Warmup Iteration   4: 54702.476 ops/s
Iteration   1: 53056.969 ops/s
Iteration   2: 54549.541 ops/s
Iteration   3: 54578.880 ops/s
Iteration   4: 54674.412 ops/s

# Run progress: 38.89% complete, ETA 01:13:56
# Fork: 3 of 4
# Warmup Iteration   1: 49841.882 ops/s
# Warmup Iteration   2: 53466.696 ops/s
# Warmup Iteration   3: 53424.531 ops/s
# Warmup Iteration   4: 53451.177 ops/s
Iteration   1: 53587.678 ops/s
Iteration   2: 53437.370 ops/s
Iteration   3: 53525.545 ops/s
Iteration   4: 53618.467 ops/s

# Run progress: 39.44% complete, ETA 01:13:16
# Fork: 4 of 4
# Warmup Iteration   1: 50974.115 ops/s
# Warmup Iteration   2: 54212.539 ops/s
# Warmup Iteration   3: 54504.230 ops/s
# Warmup Iteration   4: 54719.222 ops/s
Iteration   1: 54741.890 ops/s
Iteration   2: 54448.861 ops/s
Iteration   3: 54272.466 ops/s
Iteration   4: 54589.896 ops/s


Result "json.bench.JmhWriterBench.bench":
  54303.176 ±(99.9%) 650.639 ops/s [Average]
  (min, avg, max) = (53056.969, 54303.176, 55045.661), stdev = 639.014
  CI (99.9%): [53652.537, 54953.815] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 128kb, processorName = tethys-jackson)

# Run progress: 40.00% complete, ETA 01:12:35
# Fork: 1 of 4
# Warmup Iteration   1: 1549.526 ops/s
# Warmup Iteration   2: 1635.939 ops/s
# Warmup Iteration   3: 1629.785 ops/s
# Warmup Iteration   4: 1635.237 ops/s
Iteration   1: 1635.964 ops/s
Iteration   2: 1638.222 ops/s
Iteration   3: 1636.740 ops/s
Iteration   4: 1636.265 ops/s

# Run progress: 40.56% complete, ETA 01:11:55
# Fork: 2 of 4
# Warmup Iteration   1: 1563.369 ops/s
# Warmup Iteration   2: 1645.668 ops/s
# Warmup Iteration   3: 1632.805 ops/s
# Warmup Iteration   4: 1649.701 ops/s
Iteration   1: 1644.917 ops/s
Iteration   2: 1645.265 ops/s
Iteration   3: 1644.613 ops/s
Iteration   4: 1643.456 ops/s

# Run progress: 41.11% complete, ETA 01:11:15
# Fork: 3 of 4
# Warmup Iteration   1: 1558.644 ops/s
# Warmup Iteration   2: 1638.649 ops/s
# Warmup Iteration   3: 1645.406 ops/s
# Warmup Iteration   4: 1633.959 ops/s
Iteration   1: 1640.376 ops/s
Iteration   2: 1639.006 ops/s
Iteration   3: 1635.088 ops/s
Iteration   4: 1646.418 ops/s

# Run progress: 41.67% complete, ETA 01:10:34
# Fork: 4 of 4
# Warmup Iteration   1: 1568.247 ops/s
# Warmup Iteration   2: 1645.180 ops/s
# Warmup Iteration   3: 1644.308 ops/s
# Warmup Iteration   4: 1647.672 ops/s
Iteration   1: 1641.314 ops/s
Iteration   2: 1644.392 ops/s
Iteration   3: 1646.020 ops/s
Iteration   4: 1639.581 ops/s


Result "json.bench.JmhWriterBench.bench":
  1641.102 ±(99.9%) 4.018 ops/s [Average]
  (min, avg, max) = (1635.088, 1641.102, 1646.418), stdev = 3.946
  CI (99.9%): [1637.085, 1645.120] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 128kb, processorName = pure-jackson)

# Run progress: 42.22% complete, ETA 01:09:54
# Fork: 1 of 4
# Warmup Iteration   1: 1712.301 ops/s
# Warmup Iteration   2: 1867.483 ops/s
# Warmup Iteration   3: 1868.224 ops/s
# Warmup Iteration   4: 1864.577 ops/s
Iteration   1: 1869.416 ops/s
Iteration   2: 1863.221 ops/s
Iteration   3: 1872.932 ops/s
Iteration   4: 1872.176 ops/s

# Run progress: 42.78% complete, ETA 01:09:14
# Fork: 2 of 4
# Warmup Iteration   1: 1705.681 ops/s
# Warmup Iteration   2: 1864.718 ops/s
# Warmup Iteration   3: 1869.532 ops/s
# Warmup Iteration   4: 1865.020 ops/s
Iteration   1: 1868.429 ops/s
Iteration   2: 1864.628 ops/s
Iteration   3: 1869.324 ops/s
Iteration   4: 1863.924 ops/s

# Run progress: 43.33% complete, ETA 01:08:33
# Fork: 3 of 4
# Warmup Iteration   1: 1736.068 ops/s
# Warmup Iteration   2: 1904.996 ops/s
# Warmup Iteration   3: 1891.212 ops/s
# Warmup Iteration   4: 1892.258 ops/s
Iteration   1: 1894.984 ops/s
Iteration   2: 1899.309 ops/s
Iteration   3: 1898.148 ops/s
Iteration   4: 1893.423 ops/s

# Run progress: 43.89% complete, ETA 01:07:53
# Fork: 4 of 4
# Warmup Iteration   1: 1712.178 ops/s
# Warmup Iteration   2: 1871.128 ops/s
# Warmup Iteration   3: 1869.793 ops/s
# Warmup Iteration   4: 1869.002 ops/s
Iteration   1: 1874.829 ops/s
Iteration   2: 1873.656 ops/s
Iteration   3: 1871.487 ops/s
Iteration   4: 1871.939 ops/s


Result "json.bench.JmhWriterBench.bench":
  1876.364 ±(99.9%) 12.737 ops/s [Average]
  (min, avg, max) = (1863.221, 1876.364, 1899.309), stdev = 12.509
  CI (99.9%): [1863.627, 1889.101] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 128kb, processorName = circe)

# Run progress: 44.44% complete, ETA 01:07:13
# Fork: 1 of 4
# Warmup Iteration   1: 580.143 ops/s
# Warmup Iteration   2: 626.254 ops/s
# Warmup Iteration   3: 626.667 ops/s
# Warmup Iteration   4: 624.999 ops/s
Iteration   1: 625.210 ops/s
Iteration   2: 626.905 ops/s
Iteration   3: 614.566 ops/s
Iteration   4: 605.721 ops/s

# Run progress: 45.00% complete, ETA 01:06:33
# Fork: 2 of 4
# Warmup Iteration   1: 567.232 ops/s
# Warmup Iteration   2: 610.816 ops/s
# Warmup Iteration   3: 609.712 ops/s
# Warmup Iteration   4: 608.944 ops/s
Iteration   1: 608.108 ops/s
Iteration   2: 607.511 ops/s
Iteration   3: 608.627 ops/s
Iteration   4: 609.325 ops/s

# Run progress: 45.56% complete, ETA 01:05:52
# Fork: 3 of 4
# Warmup Iteration   1: 581.071 ops/s
# Warmup Iteration   2: 627.247 ops/s
# Warmup Iteration   3: 628.761 ops/s
# Warmup Iteration   4: 626.628 ops/s
Iteration   1: 628.661 ops/s
Iteration   2: 626.921 ops/s
Iteration   3: 628.163 ops/s
Iteration   4: 626.228 ops/s

# Run progress: 46.11% complete, ETA 01:05:12
# Fork: 4 of 4
# Warmup Iteration   1: 567.120 ops/s
# Warmup Iteration   2: 609.463 ops/s
# Warmup Iteration   3: 611.249 ops/s
# Warmup Iteration   4: 610.653 ops/s
Iteration   1: 609.709 ops/s
Iteration   2: 610.665 ops/s
Iteration   3: 611.833 ops/s
Iteration   4: 611.391 ops/s


Result "json.bench.JmhWriterBench.bench":
  616.222 ±(99.9%) 9.041 ops/s [Average]
  (min, avg, max) = (605.721, 616.222, 628.661), stdev = 8.880
  CI (99.9%): [607.180, 625.263] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 128kb, processorName = java.lang.StringBuilder)

# Run progress: 46.67% complete, ETA 01:04:32
# Fork: 1 of 4
# Warmup Iteration   1: 1679.755 ops/s
# Warmup Iteration   2: 1767.680 ops/s
# Warmup Iteration   3: 1774.238 ops/s
# Warmup Iteration   4: 1772.103 ops/s
Iteration   1: 1778.501 ops/s
Iteration   2: 1771.326 ops/s
Iteration   3: 1768.477 ops/s
Iteration   4: 1774.345 ops/s

# Run progress: 47.22% complete, ETA 01:03:51
# Fork: 2 of 4
# Warmup Iteration   1: 1364.506 ops/s
# Warmup Iteration   2: 1448.694 ops/s
# Warmup Iteration   3: 1454.547 ops/s
# Warmup Iteration   4: 1448.981 ops/s
Iteration   1: 1451.274 ops/s
Iteration   2: 1454.661 ops/s
Iteration   3: 1453.331 ops/s
Iteration   4: 1459.166 ops/s

# Run progress: 47.78% complete, ETA 01:03:11
# Fork: 3 of 4
# Warmup Iteration   1: 1345.964 ops/s
# Warmup Iteration   2: 1448.572 ops/s
# Warmup Iteration   3: 1446.434 ops/s
# Warmup Iteration   4: 1445.374 ops/s
Iteration   1: 1451.572 ops/s
Iteration   2: 1443.786 ops/s
Iteration   3: 1441.610 ops/s
Iteration   4: 1446.448 ops/s

# Run progress: 48.33% complete, ETA 01:02:31
# Fork: 4 of 4
# Warmup Iteration   1: 1367.701 ops/s
# Warmup Iteration   2: 1432.138 ops/s
# Warmup Iteration   3: 1437.179 ops/s
# Warmup Iteration   4: 1436.122 ops/s
Iteration   1: 1434.144 ops/s
Iteration   2: 1436.369 ops/s
Iteration   3: 1435.954 ops/s
Iteration   4: 1432.670 ops/s


Result "json.bench.JmhWriterBench.bench":
  1527.102 ±(99.9%) 149.609 ops/s [Average]
  (min, avg, max) = (1432.670, 1527.102, 1778.501), stdev = 146.936
  CI (99.9%): [1377.493, 1676.711] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 128kb, processorName = scala.StringBuilder)

# Run progress: 48.89% complete, ETA 01:01:51
# Fork: 1 of 4
# Warmup Iteration   1: 1576.214 ops/s
# Warmup Iteration   2: 1657.310 ops/s
# Warmup Iteration   3: 1666.518 ops/s
# Warmup Iteration   4: 1672.281 ops/s
Iteration   1: 1662.205 ops/s
Iteration   2: 1665.225 ops/s
Iteration   3: 1670.891 ops/s
Iteration   4: 1671.152 ops/s

# Run progress: 49.44% complete, ETA 01:01:10
# Fork: 2 of 4
# Warmup Iteration   1: 1434.904 ops/s
# Warmup Iteration   2: 1500.416 ops/s
# Warmup Iteration   3: 1504.333 ops/s
# Warmup Iteration   4: 1500.028 ops/s
Iteration   1: 1494.151 ops/s
Iteration   2: 1501.092 ops/s
Iteration   3: 1498.210 ops/s
Iteration   4: 1503.057 ops/s

# Run progress: 50.00% complete, ETA 01:00:30
# Fork: 3 of 4
# Warmup Iteration   1: 1477.385 ops/s
# Warmup Iteration   2: 1549.352 ops/s
# Warmup Iteration   3: 1557.786 ops/s
# Warmup Iteration   4: 1555.632 ops/s
Iteration   1: 1553.740 ops/s
Iteration   2: 1563.187 ops/s
Iteration   3: 1556.817 ops/s
Iteration   4: 1559.213 ops/s

# Run progress: 50.56% complete, ETA 00:59:50
# Fork: 4 of 4
# Warmup Iteration   1: 1328.770 ops/s
# Warmup Iteration   2: 1398.774 ops/s
# Warmup Iteration   3: 1404.563 ops/s
# Warmup Iteration   4: 1398.455 ops/s
Iteration   1: 1400.186 ops/s
Iteration   2: 1400.370 ops/s
Iteration   3: 1400.646 ops/s
Iteration   4: 1401.578 ops/s


Result "json.bench.JmhWriterBench.bench":
  1531.357 ±(99.9%) 101.644 ops/s [Average]
  (min, avg, max) = (1400.186, 1531.357, 1671.152), stdev = 99.828
  CI (99.9%): [1429.714, 1633.001] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 128kb, processorName = json4s-jackson)

# Run progress: 51.11% complete, ETA 00:59:09
# Fork: 1 of 4
# Warmup Iteration   1: 148.093 ops/s
# Warmup Iteration   2: 177.736 ops/s
# Warmup Iteration   3: 178.237 ops/s
# Warmup Iteration   4: 178.026 ops/s
Iteration   1: 178.236 ops/s
Iteration   2: 177.187 ops/s
Iteration   3: 177.771 ops/s
Iteration   4: 178.771 ops/s

# Run progress: 51.67% complete, ETA 00:58:29
# Fork: 2 of 4
# Warmup Iteration   1: 149.438 ops/s
# Warmup Iteration   2: 179.606 ops/s
# Warmup Iteration   3: 179.188 ops/s
# Warmup Iteration   4: 179.761 ops/s
Iteration   1: 178.283 ops/s
Iteration   2: 179.130 ops/s
Iteration   3: 179.133 ops/s
Iteration   4: 179.627 ops/s

# Run progress: 52.22% complete, ETA 00:57:49
# Fork: 3 of 4
# Warmup Iteration   1: 142.569 ops/s
# Warmup Iteration   2: 178.422 ops/s
# Warmup Iteration   3: 177.258 ops/s
# Warmup Iteration   4: 178.390 ops/s
Iteration   1: 177.782 ops/s
Iteration   2: 178.197 ops/s
Iteration   3: 178.268 ops/s
Iteration   4: 177.627 ops/s

# Run progress: 52.78% complete, ETA 00:57:08
# Fork: 4 of 4
# Warmup Iteration   1: 142.837 ops/s
# Warmup Iteration   2: 178.777 ops/s
# Warmup Iteration   3: 178.469 ops/s
# Warmup Iteration   4: 177.665 ops/s
Iteration   1: 178.542 ops/s
Iteration   2: 176.869 ops/s
Iteration   3: 178.368 ops/s
Iteration   4: 178.974 ops/s


Result "json.bench.JmhWriterBench.bench":
  178.298 ±(99.9%) 0.752 ops/s [Average]
  (min, avg, max) = (176.869, 178.298, 179.627), stdev = 0.739
  CI (99.9%): [177.546, 179.050] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 128kb, processorName = json4s-native)

# Run progress: 53.33% complete, ETA 00:56:28
# Fork: 1 of 4
# Warmup Iteration   1: 149.121 ops/s
# Warmup Iteration   2: 194.141 ops/s
# Warmup Iteration   3: 194.478 ops/s
# Warmup Iteration   4: 194.552 ops/s
Iteration   1: 194.119 ops/s
Iteration   2: 194.150 ops/s
Iteration   3: 194.500 ops/s
Iteration   4: 194.068 ops/s

# Run progress: 53.89% complete, ETA 00:55:48
# Fork: 2 of 4
# Warmup Iteration   1: 146.138 ops/s
# Warmup Iteration   2: 193.764 ops/s
# Warmup Iteration   3: 193.108 ops/s
# Warmup Iteration   4: 193.438 ops/s
Iteration   1: 194.215 ops/s
Iteration   2: 193.276 ops/s
Iteration   3: 193.791 ops/s
Iteration   4: 193.762 ops/s

# Run progress: 54.44% complete, ETA 00:55:08
# Fork: 3 of 4
# Warmup Iteration   1: 147.340 ops/s
# Warmup Iteration   2: 195.439 ops/s
# Warmup Iteration   3: 196.127 ops/s
# Warmup Iteration   4: 195.819 ops/s
Iteration   1: 195.903 ops/s
Iteration   2: 195.892 ops/s
Iteration   3: 195.377 ops/s
Iteration   4: 195.913 ops/s

# Run progress: 55.00% complete, ETA 00:54:27
# Fork: 4 of 4
# Warmup Iteration   1: 146.922 ops/s
# Warmup Iteration   2: 194.313 ops/s
# Warmup Iteration   3: 194.735 ops/s
# Warmup Iteration   4: 194.096 ops/s
Iteration   1: 193.989 ops/s
Iteration   2: 194.039 ops/s
Iteration   3: 194.803 ops/s
Iteration   4: 194.914 ops/s


Result "json.bench.JmhWriterBench.bench":
  194.544 ±(99.9%) 0.850 ops/s [Average]
  (min, avg, max) = (193.276, 194.544, 195.913), stdev = 0.835
  CI (99.9%): [193.694, 195.395] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 128kb, processorName = play-json)

# Run progress: 55.56% complete, ETA 00:53:47
# Fork: 1 of 4
# Warmup Iteration   1: 184.061 ops/s
# Warmup Iteration   2: 208.903 ops/s
# Warmup Iteration   3: 207.930 ops/s
# Warmup Iteration   4: 208.667 ops/s
Iteration   1: 208.600 ops/s
Iteration   2: 208.828 ops/s
Iteration   3: 208.877 ops/s
Iteration   4: 208.403 ops/s

# Run progress: 56.11% complete, ETA 00:53:07
# Fork: 2 of 4
# Warmup Iteration   1: 181.701 ops/s
# Warmup Iteration   2: 205.926 ops/s
# Warmup Iteration   3: 206.186 ops/s
# Warmup Iteration   4: 205.347 ops/s
Iteration   1: 206.445 ops/s
Iteration   2: 207.610 ops/s
Iteration   3: 206.867 ops/s
Iteration   4: 206.501 ops/s

# Run progress: 56.67% complete, ETA 00:52:26
# Fork: 3 of 4
# Warmup Iteration   1: 185.107 ops/s
# Warmup Iteration   2: 210.133 ops/s
# Warmup Iteration   3: 210.739 ops/s
# Warmup Iteration   4: 210.562 ops/s
Iteration   1: 209.892 ops/s
Iteration   2: 209.972 ops/s
Iteration   3: 210.399 ops/s
Iteration   4: 210.184 ops/s

# Run progress: 57.22% complete, ETA 00:51:46
# Fork: 4 of 4
# Warmup Iteration   1: 184.107 ops/s
# Warmup Iteration   2: 207.617 ops/s
# Warmup Iteration   3: 207.593 ops/s
# Warmup Iteration   4: 207.458 ops/s
Iteration   1: 207.593 ops/s
Iteration   2: 207.060 ops/s
Iteration   3: 207.373 ops/s
Iteration   4: 207.509 ops/s


Result "json.bench.JmhWriterBench.bench":
  208.257 ±(99.9%) 1.358 ops/s [Average]
  (min, avg, max) = (206.445, 208.257, 210.399), stdev = 1.334
  CI (99.9%): [206.899, 209.616] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 128kb, processorName = spray-json)

# Run progress: 57.78% complete, ETA 00:51:06
# Fork: 1 of 4
# Warmup Iteration   1: 362.129 ops/s
# Warmup Iteration   2: 389.676 ops/s
# Warmup Iteration   3: 390.857 ops/s
# Warmup Iteration   4: 387.909 ops/s
Iteration   1: 387.033 ops/s
Iteration   2: 387.187 ops/s
Iteration   3: 386.782 ops/s
Iteration   4: 387.523 ops/s

# Run progress: 58.33% complete, ETA 00:50:25
# Fork: 2 of 4
# Warmup Iteration   1: 348.262 ops/s
# Warmup Iteration   2: 379.146 ops/s
# Warmup Iteration   3: 380.416 ops/s
# Warmup Iteration   4: 378.226 ops/s
Iteration   1: 378.707 ops/s
Iteration   2: 378.757 ops/s
Iteration   3: 378.079 ops/s
Iteration   4: 379.595 ops/s

# Run progress: 58.89% complete, ETA 00:49:45
# Fork: 3 of 4
# Warmup Iteration   1: 367.130 ops/s
# Warmup Iteration   2: 398.682 ops/s
# Warmup Iteration   3: 397.805 ops/s
# Warmup Iteration   4: 396.909 ops/s
Iteration   1: 395.702 ops/s
Iteration   2: 397.634 ops/s
Iteration   3: 396.414 ops/s
Iteration   4: 397.149 ops/s

# Run progress: 59.44% complete, ETA 00:49:05
# Fork: 4 of 4
# Warmup Iteration   1: 346.197 ops/s
# Warmup Iteration   2: 377.041 ops/s
# Warmup Iteration   3: 376.320 ops/s
# Warmup Iteration   4: 376.340 ops/s
Iteration   1: 376.062 ops/s
Iteration   2: 377.819 ops/s
Iteration   3: 378.126 ops/s
Iteration   4: 376.836 ops/s


Result "json.bench.JmhWriterBench.bench":
  384.963 ±(99.9%) 8.194 ops/s [Average]
  (min, avg, max) = (376.062, 384.963, 397.634), stdev = 8.048
  CI (99.9%): [376.769, 393.157] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 1mb, processorName = tethys-jackson)

# Run progress: 60.00% complete, ETA 00:48:24
# Fork: 1 of 4
# Warmup Iteration   1: 186.261 ops/s
# Warmup Iteration   2: 206.047 ops/s
# Warmup Iteration   3: 206.370 ops/s
# Warmup Iteration   4: 205.770 ops/s
Iteration   1: 205.854 ops/s
Iteration   2: 205.540 ops/s
Iteration   3: 205.082 ops/s
Iteration   4: 205.277 ops/s

# Run progress: 60.56% complete, ETA 00:47:44
# Fork: 2 of 4
# Warmup Iteration   1: 186.054 ops/s
# Warmup Iteration   2: 205.863 ops/s
# Warmup Iteration   3: 206.049 ops/s
# Warmup Iteration   4: 205.542 ops/s
Iteration   1: 205.790 ops/s
Iteration   2: 205.643 ops/s
Iteration   3: 205.653 ops/s
Iteration   4: 205.693 ops/s

# Run progress: 61.11% complete, ETA 00:47:04
# Fork: 3 of 4
# Warmup Iteration   1: 187.806 ops/s
# Warmup Iteration   2: 207.806 ops/s
# Warmup Iteration   3: 206.901 ops/s
# Warmup Iteration   4: 205.319 ops/s
Iteration   1: 206.699 ops/s
Iteration   2: 206.870 ops/s
Iteration   3: 207.344 ops/s
Iteration   4: 207.064 ops/s

# Run progress: 61.67% complete, ETA 00:46:23
# Fork: 4 of 4
# Warmup Iteration   1: 185.776 ops/s
# Warmup Iteration   2: 204.723 ops/s
# Warmup Iteration   3: 205.631 ops/s
# Warmup Iteration   4: 205.156 ops/s
Iteration   1: 205.765 ops/s
Iteration   2: 204.793 ops/s
Iteration   3: 206.001 ops/s
Iteration   4: 205.724 ops/s


Result "json.bench.JmhWriterBench.bench":
  205.924 ±(99.9%) 0.728 ops/s [Average]
  (min, avg, max) = (204.793, 205.924, 207.344), stdev = 0.715
  CI (99.9%): [205.197, 206.652] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 1mb, processorName = pure-jackson)

# Run progress: 62.22% complete, ETA 00:45:43
# Fork: 1 of 4
# Warmup Iteration   1: 190.163 ops/s
# Warmup Iteration   2: 218.239 ops/s
# Warmup Iteration   3: 220.569 ops/s
# Warmup Iteration   4: 220.637 ops/s
Iteration   1: 221.375 ops/s
Iteration   2: 221.027 ops/s
Iteration   3: 222.418 ops/s
Iteration   4: 221.089 ops/s

# Run progress: 62.78% complete, ETA 00:45:03
# Fork: 2 of 4
# Warmup Iteration   1: 191.897 ops/s
# Warmup Iteration   2: 220.252 ops/s
# Warmup Iteration   3: 222.387 ops/s
# Warmup Iteration   4: 223.051 ops/s
Iteration   1: 222.755 ops/s
Iteration   2: 222.314 ops/s
Iteration   3: 222.223 ops/s
Iteration   4: 222.772 ops/s

# Run progress: 63.33% complete, ETA 00:44:23
# Fork: 3 of 4
# Warmup Iteration   1: 184.059 ops/s
# Warmup Iteration   2: 213.135 ops/s
# Warmup Iteration   3: 215.803 ops/s
# Warmup Iteration   4: 217.171 ops/s
Iteration   1: 216.836 ops/s
Iteration   2: 216.493 ops/s
Iteration   3: 217.465 ops/s
Iteration   4: 216.278 ops/s

# Run progress: 63.89% complete, ETA 00:43:42
# Fork: 4 of 4
# Warmup Iteration   1: 190.518 ops/s
# Warmup Iteration   2: 218.355 ops/s
# Warmup Iteration   3: 220.956 ops/s
# Warmup Iteration   4: 221.329 ops/s
Iteration   1: 220.554 ops/s
Iteration   2: 221.140 ops/s
Iteration   3: 221.555 ops/s
Iteration   4: 221.254 ops/s


Result "json.bench.JmhWriterBench.bench":
  220.472 ±(99.9%) 2.354 ops/s [Average]
  (min, avg, max) = (216.278, 220.472, 222.772), stdev = 2.312
  CI (99.9%): [218.118, 222.826] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 1mb, processorName = circe)

# Run progress: 64.44% complete, ETA 00:43:02
# Fork: 1 of 4
# Warmup Iteration   1: 53.238 ops/s
# Warmup Iteration   2: 59.274 ops/s
# Warmup Iteration   3: 59.325 ops/s
# Warmup Iteration   4: 59.597 ops/s
Iteration   1: 59.362 ops/s
Iteration   2: 59.275 ops/s
Iteration   3: 59.056 ops/s
Iteration   4: 59.035 ops/s

# Run progress: 65.00% complete, ETA 00:42:22
# Fork: 2 of 4
# Warmup Iteration   1: 48.934 ops/s
# Warmup Iteration   2: 54.154 ops/s
# Warmup Iteration   3: 53.964 ops/s
# Warmup Iteration   4: 54.138 ops/s
Iteration   1: 54.105 ops/s
Iteration   2: 54.120 ops/s
Iteration   3: 53.899 ops/s
Iteration   4: 53.932 ops/s

# Run progress: 65.56% complete, ETA 00:41:41
# Fork: 3 of 4
# Warmup Iteration   1: 49.294 ops/s
# Warmup Iteration   2: 54.959 ops/s
# Warmup Iteration   3: 55.133 ops/s
# Warmup Iteration   4: 55.128 ops/s
Iteration   1: 55.170 ops/s
Iteration   2: 55.109 ops/s
Iteration   3: 55.021 ops/s
Iteration   4: 55.219 ops/s

# Run progress: 66.11% complete, ETA 00:41:01
# Fork: 4 of 4
# Warmup Iteration   1: 53.033 ops/s
# Warmup Iteration   2: 59.217 ops/s
# Warmup Iteration   3: 59.717 ops/s
# Warmup Iteration   4: 59.485 ops/s
Iteration   1: 59.194 ops/s
Iteration   2: 59.050 ops/s
Iteration   3: 59.166 ops/s
Iteration   4: 59.690 ops/s


Result "json.bench.JmhWriterBench.bench":
  56.900 ±(99.9%) 2.489 ops/s [Average]
  (min, avg, max) = (53.899, 56.900, 59.690), stdev = 2.444
  CI (99.9%): [54.411, 59.389] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 1mb, processorName = java.lang.StringBuilder)

# Run progress: 66.67% complete, ETA 00:40:21
# Fork: 1 of 4
# Warmup Iteration   1: 151.831 ops/s
# Warmup Iteration   2: 169.477 ops/s
# Warmup Iteration   3: 169.675 ops/s
# Warmup Iteration   4: 168.480 ops/s
Iteration   1: 169.263 ops/s
Iteration   2: 169.249 ops/s
Iteration   3: 169.207 ops/s
Iteration   4: 169.257 ops/s

# Run progress: 67.22% complete, ETA 00:39:40
# Fork: 2 of 4
# Warmup Iteration   1: 150.657 ops/s
# Warmup Iteration   2: 169.184 ops/s
# Warmup Iteration   3: 169.582 ops/s
# Warmup Iteration   4: 169.254 ops/s
Iteration   1: 169.193 ops/s
Iteration   2: 168.479 ops/s
Iteration   3: 168.710 ops/s
Iteration   4: 169.086 ops/s

# Run progress: 67.78% complete, ETA 00:39:00
# Fork: 3 of 4
# Warmup Iteration   1: 148.267 ops/s
# Warmup Iteration   2: 165.747 ops/s
# Warmup Iteration   3: 166.291 ops/s
# Warmup Iteration   4: 165.973 ops/s
Iteration   1: 165.828 ops/s
Iteration   2: 165.913 ops/s
Iteration   3: 165.855 ops/s
Iteration   4: 165.714 ops/s

# Run progress: 68.33% complete, ETA 00:38:20
# Fork: 4 of 4
# Warmup Iteration   1: 150.371 ops/s
# Warmup Iteration   2: 168.348 ops/s
# Warmup Iteration   3: 168.258 ops/s
# Warmup Iteration   4: 167.459 ops/s
Iteration   1: 167.254 ops/s
Iteration   2: 168.210 ops/s
Iteration   3: 168.176 ops/s
Iteration   4: 168.304 ops/s


Result "json.bench.JmhWriterBench.bench":
  167.981 ±(99.9%) 1.419 ops/s [Average]
  (min, avg, max) = (165.714, 167.981, 169.263), stdev = 1.394
  CI (99.9%): [166.562, 169.400] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 1mb, processorName = scala.StringBuilder)

# Run progress: 68.89% complete, ETA 00:37:39
# Fork: 1 of 4
# Warmup Iteration   1: 137.943 ops/s
# Warmup Iteration   2: 155.618 ops/s
# Warmup Iteration   3: 155.303 ops/s
# Warmup Iteration   4: 155.765 ops/s
Iteration   1: 155.598 ops/s
Iteration   2: 155.043 ops/s
Iteration   3: 154.985 ops/s
Iteration   4: 155.304 ops/s

# Run progress: 69.44% complete, ETA 00:36:59
# Fork: 2 of 4
# Warmup Iteration   1: 137.534 ops/s
# Warmup Iteration   2: 153.173 ops/s
# Warmup Iteration   3: 153.059 ops/s
# Warmup Iteration   4: 153.505 ops/s
Iteration   1: 153.506 ops/s
Iteration   2: 153.299 ops/s
Iteration   3: 153.666 ops/s
Iteration   4: 153.798 ops/s

# Run progress: 70.00% complete, ETA 00:36:19
# Fork: 3 of 4
# Warmup Iteration   1: 141.288 ops/s
# Warmup Iteration   2: 157.886 ops/s
# Warmup Iteration   3: 157.777 ops/s
# Warmup Iteration   4: 158.263 ops/s
Iteration   1: 158.414 ops/s
Iteration   2: 157.977 ops/s
Iteration   3: 158.081 ops/s
Iteration   4: 157.875 ops/s

# Run progress: 70.56% complete, ETA 00:35:38
# Fork: 4 of 4
# Warmup Iteration   1: 138.485 ops/s
# Warmup Iteration   2: 155.431 ops/s
# Warmup Iteration   3: 155.335 ops/s
# Warmup Iteration   4: 154.951 ops/s
Iteration   1: 155.376 ops/s
Iteration   2: 154.701 ops/s
Iteration   3: 154.709 ops/s
Iteration   4: 154.784 ops/s


Result "json.bench.JmhWriterBench.bench":
  155.445 ±(99.9%) 1.749 ops/s [Average]
  (min, avg, max) = (153.299, 155.445, 158.414), stdev = 1.718
  CI (99.9%): [153.696, 157.194] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 1mb, processorName = json4s-jackson)

# Run progress: 71.11% complete, ETA 00:34:58
# Fork: 1 of 4
# Warmup Iteration   1: 17.679 ops/s
# Warmup Iteration   2: 21.420 ops/s
# Warmup Iteration   3: 21.182 ops/s
# Warmup Iteration   4: 21.349 ops/s
Iteration   1: 20.976 ops/s
Iteration   2: 21.279 ops/s
Iteration   3: 21.604 ops/s
Iteration   4: 21.593 ops/s

# Run progress: 71.67% complete, ETA 00:34:18
# Fork: 2 of 4
# Warmup Iteration   1: 16.779 ops/s
# Warmup Iteration   2: 19.771 ops/s
# Warmup Iteration   3: 19.563 ops/s
# Warmup Iteration   4: 19.894 ops/s
Iteration   1: 19.553 ops/s
Iteration   2: 19.894 ops/s
Iteration   3: 20.011 ops/s
Iteration   4: 20.059 ops/s

# Run progress: 72.22% complete, ETA 00:33:38
# Fork: 3 of 4
# Warmup Iteration   1: 16.731 ops/s
# Warmup Iteration   2: 20.112 ops/s
# Warmup Iteration   3: 20.258 ops/s
# Warmup Iteration   4: 20.268 ops/s
Iteration   1: 20.188 ops/s
Iteration   2: 20.177 ops/s
Iteration   3: 20.283 ops/s
Iteration   4: 20.278 ops/s

# Run progress: 72.78% complete, ETA 00:32:57
# Fork: 4 of 4
# Warmup Iteration   1: 16.827 ops/s
# Warmup Iteration   2: 19.995 ops/s
# Warmup Iteration   3: 19.865 ops/s
# Warmup Iteration   4: 19.519 ops/s
Iteration   1: 19.799 ops/s
Iteration   2: 19.974 ops/s
Iteration   3: 20.099 ops/s
Iteration   4: 20.220 ops/s


Result "json.bench.JmhWriterBench.bench":
  20.374 ±(99.9%) 0.644 ops/s [Average]
  (min, avg, max) = (19.553, 20.374, 21.604), stdev = 0.632
  CI (99.9%): [19.730, 21.018] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 1mb, processorName = json4s-native)

# Run progress: 73.33% complete, ETA 00:32:17
# Fork: 1 of 4
# Warmup Iteration   1: 16.053 ops/s
# Warmup Iteration   2: 19.980 ops/s
# Warmup Iteration   3: 20.014 ops/s
# Warmup Iteration   4: 19.989 ops/s
Iteration   1: 19.963 ops/s
Iteration   2: 20.003 ops/s
Iteration   3: 20.090 ops/s
Iteration   4: 20.063 ops/s

# Run progress: 73.89% complete, ETA 00:31:37
# Fork: 2 of 4
# Warmup Iteration   1: 17.510 ops/s
# Warmup Iteration   2: 22.474 ops/s
# Warmup Iteration   3: 22.481 ops/s
# Warmup Iteration   4: 22.467 ops/s
Iteration   1: 22.586 ops/s
Iteration   2: 22.580 ops/s
Iteration   3: 22.579 ops/s
Iteration   4: 22.517 ops/s

# Run progress: 74.44% complete, ETA 00:30:56
# Fork: 3 of 4
# Warmup Iteration   1: 15.736 ops/s
# Warmup Iteration   2: 19.774 ops/s
# Warmup Iteration   3: 19.754 ops/s
# Warmup Iteration   4: 19.789 ops/s
Iteration   1: 19.817 ops/s
Iteration   2: 19.708 ops/s
Iteration   3: 19.759 ops/s
Iteration   4: 19.783 ops/s

# Run progress: 75.00% complete, ETA 00:30:16
# Fork: 4 of 4
# Warmup Iteration   1: 17.649 ops/s
# Warmup Iteration   2: 22.542 ops/s
# Warmup Iteration   3: 22.424 ops/s
# Warmup Iteration   4: 22.490 ops/s
Iteration   1: 22.503 ops/s
Iteration   2: 22.442 ops/s
Iteration   3: 22.518 ops/s
Iteration   4: 22.547 ops/s


Result "json.bench.JmhWriterBench.bench":
  21.216 ±(99.9%) 1.390 ops/s [Average]
  (min, avg, max) = (19.708, 21.216, 22.586), stdev = 1.365
  CI (99.9%): [19.826, 22.606] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 1mb, processorName = play-json)

# Run progress: 75.56% complete, ETA 00:29:36
# Fork: 1 of 4
# Warmup Iteration   1: 19.112 ops/s
# Warmup Iteration   2: 21.838 ops/s
# Warmup Iteration   3: 21.885 ops/s
# Warmup Iteration   4: 21.866 ops/s
Iteration   1: 21.914 ops/s
Iteration   2: 21.993 ops/s
Iteration   3: 21.855 ops/s
Iteration   4: 21.939 ops/s

# Run progress: 76.11% complete, ETA 00:28:56
# Fork: 2 of 4
# Warmup Iteration   1: 19.570 ops/s
# Warmup Iteration   2: 22.381 ops/s
# Warmup Iteration   3: 22.458 ops/s
# Warmup Iteration   4: 22.460 ops/s
Iteration   1: 22.517 ops/s
Iteration   2: 22.464 ops/s
Iteration   3: 22.439 ops/s
Iteration   4: 22.520 ops/s

# Run progress: 76.67% complete, ETA 00:28:15
# Fork: 3 of 4
# Warmup Iteration   1: 19.715 ops/s
# Warmup Iteration   2: 22.658 ops/s
# Warmup Iteration   3: 22.722 ops/s
# Warmup Iteration   4: 22.685 ops/s
Iteration   1: 22.633 ops/s
Iteration   2: 22.714 ops/s
Iteration   3: 22.623 ops/s
Iteration   4: 22.687 ops/s

# Run progress: 77.22% complete, ETA 00:27:35
# Fork: 4 of 4
# Warmup Iteration   1: 19.659 ops/s
# Warmup Iteration   2: 22.681 ops/s
# Warmup Iteration   3: 22.635 ops/s
# Warmup Iteration   4: 22.743 ops/s
Iteration   1: 22.682 ops/s
Iteration   2: 22.526 ops/s
Iteration   3: 22.724 ops/s
Iteration   4: 22.704 ops/s


Result "json.bench.JmhWriterBench.bench":
  22.433 ±(99.9%) 0.323 ops/s [Average]
  (min, avg, max) = (21.855, 22.433, 22.724), stdev = 0.317
  CI (99.9%): [22.111, 22.756] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 1mb, processorName = spray-json)

# Run progress: 77.78% complete, ETA 00:26:55
# Fork: 1 of 4
# Warmup Iteration   1: 35.020 ops/s
# Warmup Iteration   2: 39.873 ops/s
# Warmup Iteration   3: 39.969 ops/s
# Warmup Iteration   4: 40.181 ops/s
Iteration   1: 40.194 ops/s
Iteration   2: 40.303 ops/s
Iteration   3: 40.264 ops/s
Iteration   4: 40.277 ops/s

# Run progress: 78.33% complete, ETA 00:26:14
# Fork: 2 of 4
# Warmup Iteration   1: 35.215 ops/s
# Warmup Iteration   2: 39.733 ops/s
# Warmup Iteration   3: 39.701 ops/s
# Warmup Iteration   4: 39.830 ops/s
Iteration   1: 40.019 ops/s
Iteration   2: 39.803 ops/s
Iteration   3: 39.617 ops/s
Iteration   4: 39.725 ops/s

# Run progress: 78.89% complete, ETA 00:25:34
# Fork: 3 of 4
# Warmup Iteration   1: 34.536 ops/s
# Warmup Iteration   2: 38.658 ops/s
# Warmup Iteration   3: 38.731 ops/s
# Warmup Iteration   4: 38.745 ops/s
Iteration   1: 38.830 ops/s
Iteration   2: 38.823 ops/s
Iteration   3: 38.702 ops/s
Iteration   4: 38.705 ops/s

# Run progress: 79.44% complete, ETA 00:24:54
# Fork: 4 of 4
# Warmup Iteration   1: 33.906 ops/s
# Warmup Iteration   2: 38.002 ops/s
# Warmup Iteration   3: 38.379 ops/s
# Warmup Iteration   4: 38.423 ops/s
Iteration   1: 38.549 ops/s
Iteration   2: 38.339 ops/s
Iteration   3: 38.425 ops/s
Iteration   4: 38.503 ops/s


Result "json.bench.JmhWriterBench.bench":
  39.317 ±(99.9%) 0.779 ops/s [Average]
  (min, avg, max) = (38.339, 39.317, 40.303), stdev = 0.765
  CI (99.9%): [38.538, 40.096] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 32mb, processorName = tethys-jackson)

# Run progress: 80.00% complete, ETA 00:24:13
# Fork: 1 of 4
# Warmup Iteration   1: 3.089 ops/s
# Warmup Iteration   2: 3.860 ops/s
# Warmup Iteration   3: 3.711 ops/s
# Warmup Iteration   4: 3.558 ops/s
Iteration   1: 3.555 ops/s
Iteration   2: 3.560 ops/s
Iteration   3: 3.554 ops/s
Iteration   4: 3.562 ops/s

# Run progress: 80.56% complete, ETA 00:23:33
# Fork: 2 of 4
# Warmup Iteration   1: 2.808 ops/s
# Warmup Iteration   2: 3.420 ops/s
# Warmup Iteration   3: 3.406 ops/s
# Warmup Iteration   4: 3.426 ops/s
Iteration   1: 3.425 ops/s
Iteration   2: 3.432 ops/s
Iteration   3: 3.419 ops/s
Iteration   4: 3.430 ops/s

# Run progress: 81.11% complete, ETA 00:22:54
# Fork: 3 of 4
# Warmup Iteration   1: 2.993 ops/s
# Warmup Iteration   2: 3.521 ops/s
# Warmup Iteration   3: 3.379 ops/s
# Warmup Iteration   4: 3.525 ops/s
Iteration   1: 3.516 ops/s
Iteration   2: 3.491 ops/s
Iteration   3: 3.520 ops/s
Iteration   4: 3.518 ops/s

# Run progress: 81.67% complete, ETA 00:22:14
# Fork: 4 of 4
# Warmup Iteration   1: 2.834 ops/s
# Warmup Iteration   2: 3.441 ops/s
# Warmup Iteration   3: 3.410 ops/s
# Warmup Iteration   4: 3.444 ops/s
Iteration   1: 3.451 ops/s
Iteration   2: 3.434 ops/s
Iteration   3: 3.440 ops/s
Iteration   4: 3.436 ops/s


Result "json.bench.JmhWriterBench.bench":
  3.484 ±(99.9%) 0.057 ops/s [Average]
  (min, avg, max) = (3.419, 3.484, 3.562), stdev = 0.056
  CI (99.9%): [3.427, 3.541] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 32mb, processorName = pure-jackson)

# Run progress: 82.22% complete, ETA 00:21:34
# Fork: 1 of 4
# Warmup Iteration   1: 3.494 ops/s
# Warmup Iteration   2: 4.088 ops/s
# Warmup Iteration   3: 4.014 ops/s
# Warmup Iteration   4: 3.972 ops/s
Iteration   1: 4.006 ops/s
Iteration   2: 4.012 ops/s
Iteration   3: 4.021 ops/s
Iteration   4: 4.020 ops/s

# Run progress: 82.78% complete, ETA 00:20:54
# Fork: 2 of 4
# Warmup Iteration   1: 3.603 ops/s
# Warmup Iteration   2: 4.271 ops/s
# Warmup Iteration   3: 3.956 ops/s
# Warmup Iteration   4: 3.998 ops/s
Iteration   1: 4.020 ops/s
Iteration   2: 4.025 ops/s
Iteration   3: 4.022 ops/s
Iteration   4: 4.018 ops/s

# Run progress: 83.33% complete, ETA 00:20:14
# Fork: 3 of 4
# Warmup Iteration   1: 3.488 ops/s
# Warmup Iteration   2: 3.965 ops/s
# Warmup Iteration   3: 4.017 ops/s
# Warmup Iteration   4: 3.968 ops/s
Iteration   1: 4.015 ops/s
Iteration   2: 3.997 ops/s
Iteration   3: 4.006 ops/s
Iteration   4: 4.013 ops/s

# Run progress: 83.89% complete, ETA 00:19:34
# Fork: 4 of 4
# Warmup Iteration   1: 3.591 ops/s
# Warmup Iteration   2: 4.097 ops/s
# Warmup Iteration   3: 4.018 ops/s
# Warmup Iteration   4: 3.992 ops/s
Iteration   1: 4.012 ops/s
Iteration   2: 4.020 ops/s
Iteration   3: 4.006 ops/s
Iteration   4: 4.015 ops/s


Result "json.bench.JmhWriterBench.bench":
  4.014 ±(99.9%) 0.008 ops/s [Average]
  (min, avg, max) = (3.997, 4.014, 4.025), stdev = 0.008
  CI (99.9%): [4.007, 4.022] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 32mb, processorName = circe)

# Run progress: 84.44% complete, ETA 00:18:54
# Fork: 1 of 4
# Warmup Iteration   1: 0.790 ops/s
# Warmup Iteration   2: 0.879 ops/s
# Warmup Iteration   3: 0.848 ops/s
# Warmup Iteration   4: 0.885 ops/s
Iteration   1: 0.696 ops/s
Iteration   2: 0.885 ops/s
Iteration   3: 0.862 ops/s
Iteration   4: 0.880 ops/s

# Run progress: 85.00% complete, ETA 00:18:15
# Fork: 2 of 4
# Warmup Iteration   1: 0.780 ops/s
# Warmup Iteration   2: 0.872 ops/s
# Warmup Iteration   3: 0.678 ops/s
# Warmup Iteration   4: 0.859 ops/s
Iteration   1: 0.862 ops/s
Iteration   2: 0.879 ops/s
Iteration   3: 0.675 ops/s
Iteration   4: 0.854 ops/s

# Run progress: 85.56% complete, ETA 00:17:35
# Fork: 3 of 4
# Warmup Iteration   1: 0.765 ops/s
# Warmup Iteration   2: 0.865 ops/s
# Warmup Iteration   3: 0.887 ops/s
# Warmup Iteration   4: 0.873 ops/s
Iteration   1: 0.864 ops/s
Iteration   2: 0.684 ops/s
Iteration   3: 0.857 ops/s
Iteration   4: 0.709 ops/s

# Run progress: 86.11% complete, ETA 00:16:56
# Fork: 4 of 4
# Warmup Iteration   1: 0.787 ops/s
# Warmup Iteration   2: 0.873 ops/s
# Warmup Iteration   3: 0.880 ops/s
# Warmup Iteration   4: 0.870 ops/s
Iteration   1: 0.872 ops/s
Iteration   2: 0.683 ops/s
Iteration   3: 0.872 ops/s
Iteration   4: 0.685 ops/s


Result "json.bench.JmhWriterBench.bench":
  0.801 ±(99.9%) 0.092 ops/s [Average]
  (min, avg, max) = (0.675, 0.801, 0.885), stdev = 0.091
  CI (99.9%): [0.709, 0.893] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 32mb, processorName = java.lang.StringBuilder)

# Run progress: 86.67% complete, ETA 00:16:16
# Fork: 1 of 4
# Warmup Iteration   1: 3.587 ops/s
# Warmup Iteration   2: 4.583 ops/s
# Warmup Iteration   3: 4.384 ops/s
# Warmup Iteration   4: 4.843 ops/s
Iteration   1: 4.530 ops/s
Iteration   2: 4.585 ops/s
Iteration   3: 4.652 ops/s
Iteration   4: 4.728 ops/s

# Run progress: 87.22% complete, ETA 00:15:36
# Fork: 2 of 4
# Warmup Iteration   1: 3.421 ops/s
# Warmup Iteration   2: 4.708 ops/s
# Warmup Iteration   3: 4.422 ops/s
# Warmup Iteration   4: 4.742 ops/s
Iteration   1: 4.738 ops/s
Iteration   2: 4.532 ops/s
Iteration   3: 4.715 ops/s
Iteration   4: 4.870 ops/s

# Run progress: 87.78% complete, ETA 00:14:55
# Fork: 3 of 4
# Warmup Iteration   1: 3.421 ops/s
# Warmup Iteration   2: 4.598 ops/s
# Warmup Iteration   3: 4.868 ops/s
# Warmup Iteration   4: 4.390 ops/s
Iteration   1: 4.306 ops/s
Iteration   2: 4.778 ops/s
Iteration   3: 4.547 ops/s
Iteration   4: 4.563 ops/s

# Run progress: 88.33% complete, ETA 00:14:15
# Fork: 4 of 4
# Warmup Iteration   1: 3.310 ops/s
# Warmup Iteration   2: 4.770 ops/s
# Warmup Iteration   3: 4.707 ops/s
# Warmup Iteration   4: 4.655 ops/s
Iteration   1: 4.640 ops/s
Iteration   2: 4.530 ops/s
Iteration   3: 4.689 ops/s
Iteration   4: 4.660 ops/s


Result "json.bench.JmhWriterBench.bench":
  4.629 ±(99.9%) 0.134 ops/s [Average]
  (min, avg, max) = (4.306, 4.629, 4.870), stdev = 0.132
  CI (99.9%): [4.495, 4.763] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 32mb, processorName = scala.StringBuilder)

# Run progress: 88.89% complete, ETA 00:13:34
# Fork: 1 of 4
# Warmup Iteration   1: 3.394 ops/s
# Warmup Iteration   2: 4.348 ops/s
# Warmup Iteration   3: 4.851 ops/s
# Warmup Iteration   4: 4.320 ops/s
Iteration   1: 4.332 ops/s
Iteration   2: 4.810 ops/s
Iteration   3: 4.588 ops/s
Iteration   4: 4.515 ops/s

# Run progress: 89.44% complete, ETA 00:12:54
# Fork: 2 of 4
# Warmup Iteration   1: 3.294 ops/s
# Warmup Iteration   2: 4.542 ops/s
# Warmup Iteration   3: 4.635 ops/s
# Warmup Iteration   4: 4.551 ops/s
Iteration   1: 4.367 ops/s
Iteration   2: 4.627 ops/s
Iteration   3: 4.296 ops/s
Iteration   4: 4.597 ops/s

# Run progress: 90.00% complete, ETA 00:12:13
# Fork: 3 of 4
# Warmup Iteration   1: 3.346 ops/s
# Warmup Iteration   2: 4.644 ops/s
# Warmup Iteration   3: 4.501 ops/s
# Warmup Iteration   4: 4.547 ops/s
Iteration   1: 4.324 ops/s
Iteration   2: 4.489 ops/s
Iteration   3: 4.426 ops/s
Iteration   4: 4.668 ops/s

# Run progress: 90.56% complete, ETA 00:11:32
# Fork: 4 of 4
# Warmup Iteration   1: 3.487 ops/s
# Warmup Iteration   2: 4.502 ops/s
# Warmup Iteration   3: 4.720 ops/s
# Warmup Iteration   4: 4.719 ops/s
Iteration   1: 4.802 ops/s
Iteration   2: 4.585 ops/s
Iteration   3: 4.427 ops/s
Iteration   4: 4.844 ops/s


Result "json.bench.JmhWriterBench.bench":
  4.544 ±(99.9%) 0.181 ops/s [Average]
  (min, avg, max) = (4.296, 4.544, 4.844), stdev = 0.178
  CI (99.9%): [4.363, 4.724] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 32mb, processorName = json4s-jackson)

# Run progress: 91.11% complete, ETA 00:10:52
# Fork: 1 of 4
# Warmup Iteration   1: 0.385 ops/s
# Warmup Iteration   2: 0.398 ops/s
# Warmup Iteration   3: 0.390 ops/s
# Warmup Iteration   4: 0.381 ops/s
Iteration   1: 0.373 ops/s
Iteration   2: 0.368 ops/s
Iteration   3: 0.397 ops/s
Iteration   4: 0.375 ops/s

# Run progress: 91.67% complete, ETA 00:10:11
# Fork: 2 of 4
# Warmup Iteration   1: 0.385 ops/s
# Warmup Iteration   2: 0.406 ops/s
# Warmup Iteration   3: 0.399 ops/s
# Warmup Iteration   4: 0.376 ops/s
Iteration   1: 0.364 ops/s
Iteration   2: 0.393 ops/s
Iteration   3: 0.395 ops/s
Iteration   4: 0.387 ops/s

# Run progress: 92.22% complete, ETA 00:09:31
# Fork: 3 of 4
# Warmup Iteration   1: 0.392 ops/s
# Warmup Iteration   2: 0.398 ops/s
# Warmup Iteration   3: 0.392 ops/s
# Warmup Iteration   4: 0.373 ops/s
Iteration   1: 0.364 ops/s
Iteration   2: 0.385 ops/s
Iteration   3: 0.365 ops/s
Iteration   4: 0.382 ops/s

# Run progress: 92.78% complete, ETA 00:08:51
# Fork: 4 of 4
# Warmup Iteration   1: 0.384 ops/s
# Warmup Iteration   2: 0.404 ops/s
# Warmup Iteration   3: 0.387 ops/s
# Warmup Iteration   4: 0.377 ops/s
Iteration   1: 0.365 ops/s
Iteration   2: 0.382 ops/s
Iteration   3: 0.350 ops/s
Iteration   4: 0.385 ops/s


Result "json.bench.JmhWriterBench.bench":
  0.377 ±(99.9%) 0.014 ops/s [Average]
  (min, avg, max) = (0.350, 0.377, 0.397), stdev = 0.013
  CI (99.9%): [0.363, 0.391] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 32mb, processorName = json4s-native)

# Run progress: 93.33% complete, ETA 00:08:10
# Fork: 1 of 4
# Warmup Iteration   1: 0.539 ops/s
# Warmup Iteration   2: 0.736 ops/s
# Warmup Iteration   3: 0.636 ops/s
# Warmup Iteration   4: 0.740 ops/s
Iteration   1: 0.720 ops/s
Iteration   2: 0.718 ops/s
Iteration   3: 0.734 ops/s
Iteration   4: 0.718 ops/s

# Run progress: 93.89% complete, ETA 00:07:30
# Fork: 2 of 4
# Warmup Iteration   1: 0.535 ops/s
# Warmup Iteration   2: 0.727 ops/s
# Warmup Iteration   3: 0.649 ops/s
# Warmup Iteration   4: 0.731 ops/s
Iteration   1: 0.731 ops/s
Iteration   2: 0.731 ops/s
Iteration   3: 0.732 ops/s
Iteration   4: 0.731 ops/s

# Run progress: 94.44% complete, ETA 00:06:49
# Fork: 3 of 4
# Warmup Iteration   1: 0.540 ops/s
# Warmup Iteration   2: 0.736 ops/s
# Warmup Iteration   3: 0.638 ops/s
# Warmup Iteration   4: 0.731 ops/s
Iteration   1: 0.732 ops/s
Iteration   2: 0.733 ops/s
Iteration   3: 0.732 ops/s
Iteration   4: 0.733 ops/s

# Run progress: 95.00% complete, ETA 00:06:08
# Fork: 4 of 4
# Warmup Iteration   1: 0.538 ops/s
# Warmup Iteration   2: 0.727 ops/s
# Warmup Iteration   3: 0.638 ops/s
# Warmup Iteration   4: 0.726 ops/s
Iteration   1: 0.726 ops/s
Iteration   2: 0.727 ops/s
Iteration   3: 0.725 ops/s
Iteration   4: 0.727 ops/s


Result "json.bench.JmhWriterBench.bench":
  0.728 ±(99.9%) 0.005 ops/s [Average]
  (min, avg, max) = (0.718, 0.728, 0.734), stdev = 0.005
  CI (99.9%): [0.723, 0.734] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 32mb, processorName = play-json)

# Run progress: 95.56% complete, ETA 00:05:28
# Fork: 1 of 4
# Warmup Iteration   1: 0.392 ops/s
# Warmup Iteration   2: 0.443 ops/s
# Warmup Iteration   3: 0.467 ops/s
# Warmup Iteration   4: 0.429 ops/s
Iteration   1: 0.469 ops/s
Iteration   2: 0.443 ops/s
Iteration   3: 0.474 ops/s
Iteration   4: 0.486 ops/s

# Run progress: 96.11% complete, ETA 00:04:47
# Fork: 2 of 4
# Warmup Iteration   1: 0.462 ops/s
# Warmup Iteration   2: 0.465 ops/s
# Warmup Iteration   3: 0.502 ops/s
# Warmup Iteration   4: 0.505 ops/s
Iteration   1: 0.503 ops/s
Iteration   2: 0.498 ops/s
Iteration   3: 0.503 ops/s
Iteration   4: 0.498 ops/s

# Run progress: 96.67% complete, ETA 00:04:06
# Fork: 3 of 4
# Warmup Iteration   1: 0.453 ops/s
# Warmup Iteration   2: 0.467 ops/s
# Warmup Iteration   3: 0.496 ops/s
# Warmup Iteration   4: 0.496 ops/s
Iteration   1: 0.496 ops/s
Iteration   2: 0.497 ops/s
Iteration   3: 0.496 ops/s
Iteration   4: 0.494 ops/s

# Run progress: 97.22% complete, ETA 00:03:25
# Fork: 4 of 4
# Warmup Iteration   1: 0.393 ops/s
# Warmup Iteration   2: 0.451 ops/s
# Warmup Iteration   3: 0.430 ops/s
# Warmup Iteration   4: 0.487 ops/s
Iteration   1: 0.486 ops/s
Iteration   2: 0.497 ops/s
Iteration   3: 0.490 ops/s
Iteration   4: 0.485 ops/s


Result "json.bench.JmhWriterBench.bench":
  0.489 ±(99.9%) 0.016 ops/s [Average]
  (min, avg, max) = (0.443, 0.489, 0.503), stdev = 0.015
  CI (99.9%): [0.473, 0.504] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 4 iterations, 5 s each
# Measurement: 4 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.bench.JmhWriterBench.bench
# Parameters: (jsonSize = 32mb, processorName = spray-json)

# Run progress: 97.78% complete, ETA 00:02:45
# Fork: 1 of 4
# Warmup Iteration   1: 0.502 ops/s
# Warmup Iteration   2: 0.537 ops/s
# Warmup Iteration   3: 0.515 ops/s
# Warmup Iteration   4: 0.507 ops/s
Iteration   1: 0.471 ops/s
Iteration   2: 0.508 ops/s
Iteration   3: 0.509 ops/s
Iteration   4: 0.511 ops/s

# Run progress: 98.33% complete, ETA 00:02:03
# Fork: 2 of 4
# Warmup Iteration   1: 0.462 ops/s
# Warmup Iteration   2: 0.514 ops/s
# Warmup Iteration   3: 0.515 ops/s
# Warmup Iteration   4: 0.515 ops/s
Iteration   1: 0.475 ops/s
Iteration   2: 0.512 ops/s
Iteration   3: 0.514 ops/s
Iteration   4: 0.515 ops/s

# Run progress: 98.89% complete, ETA 00:01:22
# Fork: 3 of 4
# Warmup Iteration   1: 0.489 ops/s
# Warmup Iteration   2: 0.558 ops/s
# Warmup Iteration   3: 0.575 ops/s
# Warmup Iteration   4: 0.641 ops/s
Iteration   1: 0.649 ops/s
Iteration   2: 0.542 ops/s
Iteration   3: 0.597 ops/s
Iteration   4: 0.514 ops/s

# Run progress: 99.44% complete, ETA 00:00:41
# Fork: 4 of 4
# Warmup Iteration   1: 0.481 ops/s
# Warmup Iteration   2: 0.520 ops/s
# Warmup Iteration   3: 0.635 ops/s
# Warmup Iteration   4: 0.532 ops/s
Iteration   1: 0.585 ops/s
Iteration   2: 0.580 ops/s
Iteration   3: 0.562 ops/s
Iteration   4: 0.604 ops/s


Result "json.bench.JmhWriterBench.bench":
  0.540 ±(99.9%) 0.051 ops/s [Average]
  (min, avg, max) = (0.471, 0.540, 0.649), stdev = 0.050
  CI (99.9%): [0.489, 0.592] (assumes normal distribution)


# Run complete. Total time: 02:04:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark             (jsonSize)          (processorName)   Mode  Cnt        Score       Error  Units
JmhWriterBench.bench        128b           tethys-jackson  thrpt   16   933624.586 ±  5048.703  ops/s
JmhWriterBench.bench        128b             pure-jackson  thrpt   16   563304.441 ±  3482.829  ops/s
JmhWriterBench.bench        128b                    circe  thrpt   16   621310.962 ± 16389.224  ops/s
JmhWriterBench.bench        128b  java.lang.StringBuilder  thrpt   16  1365829.788 ±  7485.740  ops/s
JmhWriterBench.bench        128b      scala.StringBuilder  thrpt   16  1288411.486 ±  8471.963  ops/s
JmhWriterBench.bench        128b           json4s-jackson  thrpt   16   185964.967 ±  1618.865  ops/s
JmhWriterBench.bench        128b            json4s-native  thrpt   16   197545.065 ±  1248.966  ops/s
JmhWriterBench.bench        128b                play-json  thrpt   16   197279.434 ±  1479.226  ops/s
JmhWriterBench.bench        128b               spray-json  thrpt   16   409063.537 ±  5338.225  ops/s
JmhWriterBench.bench         1kb           tethys-jackson  thrpt   16   220229.694 ±  5928.676  ops/s
JmhWriterBench.bench         1kb             pure-jackson  thrpt   16   179625.306 ±   426.507  ops/s
JmhWriterBench.bench         1kb                    circe  thrpt   16    86294.080 ±   602.778  ops/s
JmhWriterBench.bench         1kb  java.lang.StringBuilder  thrpt   16   197955.272 ± 18303.811  ops/s
JmhWriterBench.bench         1kb      scala.StringBuilder  thrpt   16   196492.325 ± 12187.468  ops/s
JmhWriterBench.bench         1kb           json4s-jackson  thrpt   16    24597.714 ±    42.682  ops/s
JmhWriterBench.bench         1kb            json4s-native  thrpt   16    25536.414 ±   139.522  ops/s
JmhWriterBench.bench         1kb                play-json  thrpt   16    27718.526 ±  1235.370  ops/s
JmhWriterBench.bench         1kb               spray-json  thrpt   16    54303.176 ±   650.639  ops/s
JmhWriterBench.bench       128kb           tethys-jackson  thrpt   16     1641.102 ±     4.018  ops/s
JmhWriterBench.bench       128kb             pure-jackson  thrpt   16     1876.364 ±    12.737  ops/s
JmhWriterBench.bench       128kb                    circe  thrpt   16      616.222 ±     9.041  ops/s
JmhWriterBench.bench       128kb  java.lang.StringBuilder  thrpt   16     1527.102 ±   149.609  ops/s
JmhWriterBench.bench       128kb      scala.StringBuilder  thrpt   16     1531.357 ±   101.644  ops/s
JmhWriterBench.bench       128kb           json4s-jackson  thrpt   16      178.298 ±     0.752  ops/s
JmhWriterBench.bench       128kb            json4s-native  thrpt   16      194.544 ±     0.850  ops/s
JmhWriterBench.bench       128kb                play-json  thrpt   16      208.257 ±     1.358  ops/s
JmhWriterBench.bench       128kb               spray-json  thrpt   16      384.963 ±     8.194  ops/s
JmhWriterBench.bench         1mb           tethys-jackson  thrpt   16      205.924 ±     0.728  ops/s
JmhWriterBench.bench         1mb             pure-jackson  thrpt   16      220.472 ±     2.354  ops/s
JmhWriterBench.bench         1mb                    circe  thrpt   16       56.900 ±     2.489  ops/s
JmhWriterBench.bench         1mb  java.lang.StringBuilder  thrpt   16      167.981 ±     1.419  ops/s
JmhWriterBench.bench         1mb      scala.StringBuilder  thrpt   16      155.445 ±     1.749  ops/s
JmhWriterBench.bench         1mb           json4s-jackson  thrpt   16       20.374 ±     0.644  ops/s
JmhWriterBench.bench         1mb            json4s-native  thrpt   16       21.216 ±     1.390  ops/s
JmhWriterBench.bench         1mb                play-json  thrpt   16       22.433 ±     0.323  ops/s
JmhWriterBench.bench         1mb               spray-json  thrpt   16       39.317 ±     0.779  ops/s
JmhWriterBench.bench        32mb           tethys-jackson  thrpt   16        3.484 ±     0.057  ops/s
JmhWriterBench.bench        32mb             pure-jackson  thrpt   16        4.014 ±     0.008  ops/s
JmhWriterBench.bench        32mb                    circe  thrpt   16        0.801 ±     0.092  ops/s
JmhWriterBench.bench        32mb  java.lang.StringBuilder  thrpt   16        4.629 ±     0.134  ops/s
JmhWriterBench.bench        32mb      scala.StringBuilder  thrpt   16        4.544 ±     0.181  ops/s
JmhWriterBench.bench        32mb           json4s-jackson  thrpt   16        0.377 ±     0.014  ops/s
JmhWriterBench.bench        32mb            json4s-native  thrpt   16        0.728 ±     0.005  ops/s
JmhWriterBench.bench        32mb                play-json  thrpt   16        0.489 ±     0.016  ops/s
JmhWriterBench.bench        32mb               spray-json  thrpt   16        0.540 ±     0.051  ops/s

Benchmark result is saved to /home/alex/projects/tethys/./modules/benchmarks/jmh-writer.json
